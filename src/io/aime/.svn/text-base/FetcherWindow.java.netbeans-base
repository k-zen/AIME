package io.aime;

// AIME
import io.aime.mvc.controller.AbstractController;
import io.aime.mvc.controller.FetcherController;
import io.aime.mvc.model.AbstractModel;
import io.aime.mvc.model.FetcherGeneralStatisticsTableModel;
import io.aime.mvc.model.FetcherProtocolStatusCodesTableModel;
import io.aime.mvc.view.AbstractViewPanel;
import io.aime.mvc.view.FetcherViewPanel;

// AWT
import java.awt.Dimension;
import java.awt.EventQueue;

// Swing
import javax.swing.BoxLayout;
import javax.swing.WindowConstants;

/**
 * Frame for the Fetcher.
 *
 * @author K-Zen
 * @see Singleton Pattern
 */
public final class FetcherWindow extends AbstractFrame {

    private static final FetcherWindow _INSTANCE = new FetcherWindow();
    private boolean ready = false;
    private FetcherController controller;
    private FetcherViewPanel view;

    public static FetcherWindow getInstance() {
        return _INSTANCE;
    }

    private FetcherWindow() {
    }

    @Override
    protected AbstractFrame createGUI() {
        initComponents();
        // CONTROLLERS
        controller = new FetcherController();
        // CONFIGURE MODELS
        controller.addTableModel(new FetcherProtocolStatusCodesTableModel());
        controller.addTableModel(new FetcherGeneralStatisticsTableModel());
        // VIEWS
        view = new FetcherViewPanel(controller);
        // CONFIGURE VIEWS
        controller.addView(view);
        // ADD VIEWS TO THIS PANEL.
        add(view);
        // Paint panel.
        setLocationRelativeTo(MainWindow.getInstance());
        setVisible(true);

        ready = true;

        return this;
    }

    @Override
    protected AbstractFrame configure() {
        return this;
    }

    @Override
    public AbstractFrame makeVisible() {
        if (ready) {
            if (!isVisible()) {
                setVisible(true);
            }
            else {
                toFront();
            }
        }
        else {
            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    createGUI().configure();
                }
            });
        }

        return this;
    }

    @Override
    protected AbstractController getController(byte id) {
        switch (id) {
            default:
                return controller;
        }
    }

    @Override
    protected AbstractModel getModel(byte id) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    protected AbstractViewPanel getView(byte id) {
        switch (id) {
            default:
                return view;
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fetcher Stats Window");
        setMinimumSize(new Dimension(300, 500));
        setName("Form"); // NOI18N
        setPreferredSize(new Dimension(300, 500));
        getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.LINE_AXIS));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
