package io.aime;

// --- AIME
import io.aime.util.AIMEConfiguration;

// --- Apache Hadoop
import org.apache.hadoop.conf.Configurable;
import org.apache.hadoop.conf.Configuration;

// --- AWT
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

// --- Log4J
import org.apache.log4j.Logger;

// --- Swing
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

// --- Util
import java.util.Iterator;
import java.util.Map;

class KernelStats extends JFrame implements Configurable {

  private static final Logger LOG = Logger.getLogger (KernelStats.class.getName ());
  private static final int UPDATE_INTERVAL = 10000;
  private static KernelStats thisFrame;
  private UpdateStatsTable statsUpdater;
  private Configuration conf;
  private io.aime.stats.KernelStats model = new io.aime.stats.KernelStats ();
  private Initiator initiator = new Initiator ();
  private Utilities utilities;

  private KernelStats () {
    this.initiator.initHandlers ();
    this.initiator.init ();
  }

  private class Initiator {

    void initHandlers () {
      KernelStats.this.utilities = new Utilities ();
    }

    void init () {
      KernelStats.this.initComponents ();
      KernelStats.this.statsUpdater = new UpdateStatsTable ();
      KernelStats.this.utilities.startStatsTableUpdater ();
    }
  }

  private class Utilities {

    void updateIndexServerStatsTable () {
      // Clear rows.
      ((DefaultTableModel) KernelStats.this.indexServerStatsTable.getModel ()).setRowCount (0);

      // Get data.
      Map<String, String> status = KernelStats.this.model.getIndexServerStatsTable (KernelStats.this.getConf ());

      // Iterate.
      Iterator<String> it = status.keySet ().iterator ();
      int counter = 0;
      while (it.hasNext ()) {
        String key = it.next ();
        String val = status.get (key);

        Object[] rowData = new Object[]{
          new JLabel (key),
          new JLabel (val)};

        // Insert row.
        ((DefaultTableModel) KernelStats.this.indexServerStatsTable.getModel ()).insertRow (counter, rowData);

        counter++;
      }
    }

    void updateSegmentServerStatsTable () {
      // Clear rows.
      ((DefaultTableModel) KernelStats.this.segmentServerStatsTable.getModel ()).setRowCount (0);

      // Get data.
      Map<String, String> status = KernelStats.this.model.getSegmentServerStatsTable (KernelStats.this.getConf ());

      // Iterate.
      Iterator<String> it = status.keySet ().iterator ();
      int counter = 0;
      while (it.hasNext ()) {
        String key = it.next ();
        String val = status.get (key);

        Object[] rowData = new Object[]{
          new JLabel (key),
          new JLabel (val)};

        // Insert row.
        ((DefaultTableModel) KernelStats.this.segmentServerStatsTable.getModel ()).insertRow (counter, rowData);

        counter++;
      }
    }

    void startStatsTableUpdater () {
      try {
        KernelStats.this.statsUpdater.start ();
      }
      catch (Exception e) {
        LOG.error ("Error starting table updater thread. Error: " + e.toString (), e);
      }

      if (LOG.isInfoEnabled ()) {
        LOG.info ("Table updater started.");
      }
    }

    void stopStatsTableUpdater () {
      try {
        KernelStats.this.statsUpdater.stop ();
      }
      catch (Exception e) {
        LOG.error ("Error stopping table updater thread. Error: " + e.toString (), e);
      }

      if (LOG.isInfoEnabled ()) {
        LOG.info ("Table updater stopped.");
      }
    }

    void exit () {
      KernelStats.this.utilities.stopStatsTableUpdater (); // Stop timers.
      KernelStats.this.dispose (); // Dispose window.
    }
  }

  protected static void build () {
    if (KernelStats.thisFrame != null) {
      if (!KernelStats.thisFrame.isVisible ()) {
        KernelStats.thisFrame.setVisible (true); // Mark as visible.
        KernelStats.thisFrame.utilities.startStatsTableUpdater (); // Start updaters.
      }
      else {
        KernelStats.thisFrame.toFront (); // Bring opened one to front.
      }
    }
    else { // Create a new window.
      java.awt.EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
          KernelStats.thisFrame = new KernelStats ();
          KernelStats.thisFrame.setLocationRelativeTo (Main.thisFrame);
          KernelStats.thisFrame.setVisible (true);
          // Override the default frame close method.
          KernelStats.thisFrame.addWindowListener (new WindowAdapter () {
            @Override
            public void windowClosing (WindowEvent e) {
              KernelStats.thisFrame.utilities.exit ();
            }
          });
        }
      });
    }
  }

  @Override
  public final void setConf (Configuration conf) {
    if (conf == null) {
      this.conf = new AIMEConfiguration ().create ();
    }
    else {
      this.conf = conf;
    }
  }

  @Override
  public final Configuration getConf () {
    if (this.conf == null) {
      this.setConf (null);
    }

    return this.conf;
  }

  private class UpdateStatsTable extends Timer implements ActionListener {

    private UpdateStatsTable () {
      super (KernelStats.UPDATE_INTERVAL, null);
      super.addActionListener (this);
    }

    @Override
    public void actionPerformed (ActionEvent event) {
      KernelStats.this.utilities.updateIndexServerStatsTable ();
      KernelStats.this.utilities.updateSegmentServerStatsTable ();
    }
  }

  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    infoPanel = new javax.swing.JPanel();
    dataPanel = new javax.swing.JPanel();
    indexserverStatsPanel = new javax.swing.JPanel();
    indexServerStatsScrollPane = new javax.swing.JScrollPane();
    indexServerStatsTable = new javax.swing.JTable();
    segmentServerStatsPanel = new javax.swing.JPanel();
    segmentServerStatsScrollPane = new javax.swing.JScrollPane();
    segmentServerStatsTable = new javax.swing.JTable();
    graphPanel = new javax.swing.JPanel();
    indexServerConnTimeGraphPanel = new javax.swing.JPanel();
    indexServerConnTimeGraph = new io.aime.graphs.IndexServerRequests();
    segmentServerConnTimeGraphPanel = new javax.swing.JPanel();
    segmentServerConnTimeGraph = new io.aime.graphs.SegmentServerRequests();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("Kernel Stats Window");
    setResizable(false);

    infoPanel.setLayout(new java.awt.GridLayout(1, 2));

    dataPanel.setLayout(new java.awt.GridLayout(2, 1));

    indexserverStatsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(io.aime.util.LookFeel.DEFAULT_BORDER, "IndexServer Stats", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font(io.aime.util.LookFeel.getFontBold(),Font.BOLD,io.aime.util.LookFeel.getDefaultFontSize(1))));
    indexserverStatsPanel.setPreferredSize(new java.awt.Dimension(300, 180));
    indexserverStatsPanel.setLayout(new javax.swing.BoxLayout(indexserverStatsPanel, javax.swing.BoxLayout.LINE_AXIS));

    indexServerStatsTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "Key", "Value"
      }
    ) {
      boolean[] canEdit = new boolean [] {
        false, false
      };

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    indexServerStatsScrollPane.setViewportView(indexServerStatsTable);
    indexServerStatsTable.getColumnModel().getColumn(0).setCellRenderer(new io.aime.renderers.CustomTableRenderer().getCustomRenderer(null,true));
    indexServerStatsTable.getColumnModel().getColumn(1).setCellRenderer(new io.aime.renderers.CustomTableRenderer().getCustomRenderer(null,true));

    indexserverStatsPanel.add(indexServerStatsScrollPane);

    dataPanel.add(indexserverStatsPanel);

    segmentServerStatsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(io.aime.util.LookFeel.DEFAULT_BORDER, "SegmentServer Stats", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font(io.aime.util.LookFeel.getFontBold(),Font.BOLD,io.aime.util.LookFeel.getDefaultFontSize(1))));
    segmentServerStatsPanel.setPreferredSize(new java.awt.Dimension(300, 180));
    segmentServerStatsPanel.setLayout(new javax.swing.BoxLayout(segmentServerStatsPanel, javax.swing.BoxLayout.LINE_AXIS));

    segmentServerStatsTable.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "Key", "Value"
      }
    ) {
      boolean[] canEdit = new boolean [] {
        false, false
      };

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    segmentServerStatsScrollPane.setViewportView(segmentServerStatsTable);
    segmentServerStatsTable.getColumnModel().getColumn(0).setCellRenderer(new io.aime.renderers.CustomTableRenderer().getCustomRenderer(null,true));
    segmentServerStatsTable.getColumnModel().getColumn(1).setCellRenderer(new io.aime.renderers.CustomTableRenderer().getCustomRenderer(null,true));

    segmentServerStatsPanel.add(segmentServerStatsScrollPane);

    dataPanel.add(segmentServerStatsPanel);

    infoPanel.add(dataPanel);

    graphPanel.setLayout(new java.awt.GridLayout(2, 1));

    indexServerConnTimeGraphPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(io.aime.util.LookFeel.DEFAULT_BORDER, "Avg. IndexServer Connect Time (ms):", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font(io.aime.util.LookFeel.getFontBold(),Font.BOLD,io.aime.util.LookFeel.getDefaultFontSize(1))));
    indexServerConnTimeGraphPanel.setPreferredSize(new java.awt.Dimension(300, 180));
    indexServerConnTimeGraphPanel.setLayout(new javax.swing.BoxLayout(indexServerConnTimeGraphPanel, javax.swing.BoxLayout.LINE_AXIS));
    indexServerConnTimeGraphPanel.add(indexServerConnTimeGraph);

    graphPanel.add(indexServerConnTimeGraphPanel);

    segmentServerConnTimeGraphPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(io.aime.util.LookFeel.DEFAULT_BORDER, "Avg. SegmentServer Connect Time (ms)", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font(io.aime.util.LookFeel.getFontBold(),Font.BOLD,io.aime.util.LookFeel.getDefaultFontSize(1))));
    segmentServerConnTimeGraphPanel.setPreferredSize(new java.awt.Dimension(300, 180));
    segmentServerConnTimeGraphPanel.setLayout(new javax.swing.BoxLayout(segmentServerConnTimeGraphPanel, javax.swing.BoxLayout.LINE_AXIS));
    segmentServerConnTimeGraphPanel.add(segmentServerConnTimeGraph);

    graphPanel.add(segmentServerConnTimeGraphPanel);

    infoPanel.add(graphPanel);

    getContentPane().add(infoPanel, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel dataPanel;
  private javax.swing.JPanel graphPanel;
  private io.aime.graphs.IndexServerRequests indexServerConnTimeGraph;
  private javax.swing.JPanel indexServerConnTimeGraphPanel;
  private javax.swing.JScrollPane indexServerStatsScrollPane;
  private javax.swing.JTable indexServerStatsTable;
  private javax.swing.JPanel indexserverStatsPanel;
  private javax.swing.JPanel infoPanel;
  private io.aime.graphs.SegmentServerRequests segmentServerConnTimeGraph;
  private javax.swing.JPanel segmentServerConnTimeGraphPanel;
  private javax.swing.JPanel segmentServerStatsPanel;
  private javax.swing.JScrollPane segmentServerStatsScrollPane;
  private javax.swing.JTable segmentServerStatsTable;
  // End of variables declaration//GEN-END:variables
}
