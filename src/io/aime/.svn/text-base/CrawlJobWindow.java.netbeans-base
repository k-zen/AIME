package io.aime;

import io.aime.mvc.controller.AbstractController;
import io.aime.mvc.controller.CrawlJobController;
import io.aime.mvc.model.AbstractModel;
import io.aime.mvc.model.CrawlJobModel;
import io.aime.mvc.view.AbstractViewPanel;
import io.aime.mvc.view.CrawlJobViewPanel;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.BoxLayout;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

/**
 * Frame for Crawl jobs.
 *
 * @author K-Zen
 * @see Singleton Pattern
 */
public final class CrawlJobWindow extends AbstractFrame
{

    private static final CrawlJobWindow _INSTANCE = new CrawlJobWindow();
    private boolean ready = false;
    private CrawlJobController controller;
    private CrawlJobModel model;
    private CrawlJobViewPanel view;

    public static CrawlJobWindow getInstance()
    {
        return _INSTANCE;
    }

    private CrawlJobWindow()
    {
    }

    @Override
    protected AbstractFrame createGUI()
    {
        initComponents();
        // CONTROLLERS
        controller = new CrawlJobController();
        // MODELS
        model = new CrawlJobModel();
        // CONFIGURE MODELS
        controller.addModel(model);
        // VIEWS
        view = new CrawlJobViewPanel(controller);
        // CONFIGURE VIEWS
        controller.addView(view);
        controller.addView(MainWindow.getInstance().getView(MainWindow.AIME_DASHBOARD_VIEW_ID));
        // ADD VIEWS TO THIS PANEL.
        add(view, BorderLayout.CENTER);
        // Paint panel.
        setLocationRelativeTo(MainWindow.getInstance());
        setVisible(true);
        addWindowListener(new WindowAdapter()
        {
            @Override
            public void windowClosing(WindowEvent e)
            {
                JOptionPane.showMessageDialog(
                        MainWindow.getInstance(),
                        "Use the \"Exit\" button.",
                        "HELP",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        });

        ready = true;

        return this;
    }

    @Override
    protected AbstractFrame configure()
    {
        return this;
    }

    @Override
    public AbstractFrame makeVisible()
    {
        if (ready)
        {
            if (!isVisible())
            {
                setVisible(true);
            }
            else
            {
                toFront();
            }
        }
        else
        {
            EventQueue.invokeLater(new Runnable()
            {
                @Override
                public void run()
                {
                    createGUI().configure();
                }
            });
        }

        return this;
    }

    @Override
    protected AbstractController getController(byte id)
    {
        switch (id)
        {
            default:
                return controller;
        }
    }

    @Override
    protected AbstractModel getModel(byte id)
    {
        switch (id)
        {
            default:
                return model;
        }
    }

    @Override
    protected AbstractViewPanel getView(byte id)
    {
        switch (id)
        {
            default:
                return view;
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Crawl Job");
        setMinimumSize(new Dimension(400, 360));
        setName("Form"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.LINE_AXIS));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
