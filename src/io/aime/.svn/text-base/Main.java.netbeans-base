package io.aime;

// AIME
import io.aime.cerebellum.CerebellumStarter;
import io.aime.kernel.KernelStarter;
import io.aime.mvc.controller.MainController;
import io.aime.mvc.model.AIMEEventsTableModel;
import io.aime.mvc.model.DashboardMetadataTableModel;
import io.aime.mvc.model.DashboardSpaceConsumptionTableModel;
import io.aime.mvc.model.IndexServerListingTableModel;
import io.aime.mvc.model.SegmentServerListingTableModel;
import io.aime.mvc.view.AIMEDashboardViewPanel;
import io.aime.mvc.view.AIMEEventsViewPanel;
import io.aime.mvc.view.KernelListingViewPanel;
import io.aime.mvc.view.MainEventHandler;
import io.aime.mvc.view.MainViewMenuBar;
import io.aime.server.HTTPServerStarter;
import io.aime.util.LookFeel;
import io.aime.util.AIMEConfiguration;
import io.aime.util.AIMEConstants;

// Apache Hadoop
import org.apache.hadoop.conf.Configuration;

// AWT
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GridLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

// Log4j
import org.apache.log4j.Logger;

// Swing
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

public class Main extends JFrame {

    private static final Logger LOG = Logger.getLogger(Main.class.getName());
    private static final boolean USE_WINDOWS_DECORATIONS = true;
    private static Main _INSTANCE;
    private Configuration conf = new AIMEConfiguration().create();
    private boolean isDisabled = false;

    protected static Main getInstance() {
        return _INSTANCE;
    }

    private Main(int exeType, int heapSize) {
        initComponents(); // Build the window

        CerebellumStarter.launchCerebellum(conf, exeType, heapSize); // Launch Cerebellum proceses
        HTTPServerStarter.initAll(); // Launch HTTP server proceses
        KernelStarter.initAll(this.conf, this.isDisabled); // Open connection to kernel instances
    }

    public static void main(final String args[]) {
        JFrame.setDefaultLookAndFeelDecorated(USE_WINDOWS_DECORATIONS);
        JDialog.setDefaultLookAndFeelDecorated(USE_WINDOWS_DECORATIONS);

        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    UIManager.setLookAndFeel(new LookFeel().getLook());
                }
                catch (Exception e) {
                    LOG.error("Impossible to set the \"L&F\" for the application. Error: " + e.toString(), e);
                }

                int exeType = 0;
                int heapSize = 0;
                if (args != null) {
                    exeType = ((args[0].equalsIgnoreCase("local")) ? AIMEConstants.LOCAL_EXECUTION_TYPE.getIntegerConstant() : AIMEConstants.DISTRIBUTED_EXECUTION_TYPE.getIntegerConstant());
                    try {
                        if (exeType == AIMEConstants.LOCAL_EXECUTION_TYPE.getIntegerConstant()) {
                            heapSize = Integer.parseInt(args[1]);
                        }
                    }
                    catch (Exception e) {
                        LOG.error("The value of the configured JVM Heap size could not be parsed. Error: " + e.toString(), e);
                    }
                }

                MainController controller = new MainController();
                controller.addTableModel(new IndexServerListingTableModel());
                controller.addTableModel(new SegmentServerListingTableModel());
                controller.addTableModel(new DashboardSpaceConsumptionTableModel());
                controller.addTableModel(new DashboardMetadataTableModel());
                controller.addTableModel(new AIMEEventsTableModel());

                // Build the window.
                _INSTANCE = new Main(exeType, heapSize);
                _INSTANCE.setJMenuBar(new MainViewMenuBar());
                _INSTANCE.dashboardPanel.add(new AIMEDashboardViewPanel(controller));
                _INSTANCE.leftContainerPanel.add(new KernelListingViewPanel(controller));
                _INSTANCE.rightContainerPanel.add(new AIMEEventsViewPanel(controller));
                _INSTANCE.setLocationRelativeTo(null);
                _INSTANCE.setVisible(true);
                // Override the default frame close method.
                _INSTANCE.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosing(WindowEvent e) {
                        new MainEventHandler().exitMenuItemActionPerformed(null, null);
                    }
                });

                // Custom properties.
                LookFeel.setCustomProperties();
                SwingUtilities.updateComponentTreeUI(_INSTANCE);
            }
        });
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dashboardPanel = new JPanel();
        lowerPanel = new JPanel();
        leftContainerPanel = new JPanel();
        rightContainerPanel = new JPanel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("A.I.M.E. (Automated Indexer and [Data] Mining Engine) v0.2");
        setPreferredSize(new Dimension(600, 400));
        setResizable(false);

        dashboardPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));
        dashboardPanel.setPreferredSize(new Dimension(600, 150));
        dashboardPanel.setLayout(new BoxLayout(dashboardPanel, BoxLayout.LINE_AXIS));
        getContentPane().add(dashboardPanel, BorderLayout.NORTH);

        lowerPanel.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));
        lowerPanel.setPreferredSize(new Dimension(600, 200));
        lowerPanel.setLayout(new GridLayout(1, 2));

        leftContainerPanel.setMinimumSize(new Dimension(300, 250));
        leftContainerPanel.setLayout(new BoxLayout(leftContainerPanel, BoxLayout.LINE_AXIS));
        lowerPanel.add(leftContainerPanel);

        rightContainerPanel.setLayout(new BoxLayout(rightContainerPanel, BoxLayout.LINE_AXIS));
        lowerPanel.add(rightContainerPanel);

        getContentPane().add(lowerPanel, BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel dashboardPanel;
    private JPanel leftContainerPanel;
    private JPanel lowerPanel;
    private JPanel rightContainerPanel;
    // End of variables declaration//GEN-END:variables
}
