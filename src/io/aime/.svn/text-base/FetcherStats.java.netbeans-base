package io.aime;

// AIME
import io.aime.graphs.FetcherStatusCodes;
import io.aime.util.LookFeel;

// AWT
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

// Log4j
import org.apache.log4j.Logger;

// Swing
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.Timer;
import javax.swing.WindowConstants;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

// Util
import java.util.Iterator;
import java.util.Map;
import java.util.ResourceBundle;

public class FetcherStats extends JFrame {

  private static final Logger LOG = Logger.getLogger (FetcherStats.class.getName ());
  private static final int UPDATE_INTERVAL = 1000;
  private static FetcherStats thisFrame;
  private io.aime.stats.FetcherStats model = new io.aime.stats.FetcherStats ();
  private UpdateStatsTable updater;
  private Initiator initiator = new Initiator ();
  private Utilities utilities;

  private FetcherStats () {
    this.initiator.initHandlers ();
    this.initiator.init ();
  }

  private class Initiator {

    void initHandlers () {
      FetcherStats.this.utilities = new Utilities ();
    }

    void init () {
      FetcherStats.this.initComponents ();
      FetcherStats.this.updater = new UpdateStatsTable ();
      // Updates both tables.
      FetcherStats.this.utilities.updateStatsTable ();
      // Starts the client's table updater.
      FetcherStats.this.utilities.startStatsTableUpdater ();
    }
  }

  private class Utilities {

    void updateStatsTable () {
      // Set the rows to zero.
      ((DefaultTableModel) FetcherStats.this.statsTable.getModel ()).setRowCount (0);

      Map<String, Integer> stats = FetcherStats.this.model.getStatsTable ();
      Iterator<String> it = stats.keySet ().iterator ();
      int counter = 0;
      while (it.hasNext ()) {
        String key = it.next ();
        int count = stats.get (key);

        Object[] rowData = new Object[]{
          new JLabel (key),
          new JLabel (String.valueOf (count))};

        // Insert the new row.
        ((DefaultTableModel) FetcherStats.this.statsTable.getModel ()).insertRow (counter, rowData);
        counter++;
      }
    }

    void updateStatusTable () {
      // Set the rows to zero.
      ((DefaultTableModel) FetcherStats.this.statusTable.getModel ()).setRowCount (0);

      Map<String, String> status = FetcherStats.this.model.getStatusTable ();
      Iterator<String> it = status.keySet ().iterator ();
      int counter = 0;
      while (it.hasNext ()) {
        String key = it.next ();
        String val = status.get (key);

        Object[] rowData = new Object[]{
          new JLabel (key),
          new JLabel (val)};

        // Insert the new row.
        ((DefaultTableModel) FetcherStats.this.statusTable.getModel ()).insertRow (counter, rowData);
        counter++;
      }
    }

    void startStatsTableUpdater () {
      try {
        FetcherStats.this.updater.start ();
      }
      catch (Exception e) {
        LOG.error ("Error starting table updater thread. Error: " + e.toString (), e);
      }

      if (LOG.isInfoEnabled ()) {
        LOG.info ("Table updater started.");
      }
    }

    void stopStatsTableUpdater () {
      try {
        FetcherStats.this.updater.stop ();
      }
      catch (Exception e) {
        LOG.error ("Error stopping table updater thread. Error: " + e.toString (), e);
      }

      if (LOG.isInfoEnabled ()) {
        LOG.info ("Table updater stopped.");
      }
    }

    void exit () {
      FetcherStats.this.utilities.stopStatsTableUpdater (); // Stop timers.
      FetcherStats.this.dispose (); // Dispose window.
    }
  }

  public static void build () {
    if (FetcherStats.thisFrame != null) {
      if (!FetcherStats.thisFrame.isVisible ()) {
        FetcherStats.thisFrame.setVisible (true); // Re-use the old window.
        FetcherStats.thisFrame.utilities.startStatsTableUpdater (); // Start updaters.
      }
      else {
        FetcherStats.thisFrame.toFront (); // Bring window to front.
      }
    }
    else { // Create a new window.
      EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
          FetcherStats.thisFrame = new FetcherStats ();
          FetcherStats.thisFrame.setLocationRelativeTo (Main.thisFrame);
          FetcherStats.thisFrame.setVisible (true);
          // Override the default frame close method.
          FetcherStats.thisFrame.addWindowListener (new WindowAdapter () {
            @Override
            public void windowClosing (WindowEvent e) {
              FetcherStats.thisFrame.utilities.exit ();
            }
          });
        }
      });
    }
  }

  private class UpdateStatsTable extends Timer implements ActionListener {

    private UpdateStatsTable () {
      super (UPDATE_INTERVAL, null);
      super.addActionListener (this);
    }

    @Override
    public void actionPerformed (ActionEvent event) {
      FetcherStats.this.utilities.updateStatsTable ();
      FetcherStats.this.utilities.updateStatusTable ();
    }
  }

  @SuppressWarnings("unchecked")
  private void initComponents() {//GEN-BEGIN:initComponents

    containerPanel = new JPanel();
    statusPanel = new JPanel();
    statusScrollPane = new JScrollPane();
    statusTable = new JTable();
    statsPanel = new JPanel();
    statsScrollPane = new JScrollPane();
    statsTable = new JTable();
    graphPanel = new JPanel();
    fetcherStatusCodes = new FetcherStatusCodes();

    setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
    ResourceBundle bundle = ResourceBundle.getBundle("io/aime/Bundle"); // NOI18N
    setTitle(bundle.getString("FetcherStats.title")); // NOI18N
    setName("Form"); // NOI18N
    getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.LINE_AXIS));

    containerPanel.setName("containerPanel"); // NOI18N
    containerPanel.setLayout(new BorderLayout());

    statusPanel.setBorder(BorderFactory.createTitledBorder(LookFeel.getDefaultBorder (), bundle.getString("FetcherStats.statusPanel.border.title"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, LookFeel.getFont (true, 1))); // NOI18N
    statusPanel.setName("statusPanel"); // NOI18N
    statusPanel.setPreferredSize(new Dimension(300, 140));
    statusPanel.setLayout(new BoxLayout(statusPanel, BoxLayout.LINE_AXIS));

    statusScrollPane.setName("statusScrollPane"); // NOI18N

    statusTable.setModel(new DefaultTableModel(
      new Object [][] {
        {null, null},
        {null, null},
        {null, null},
        {null, null}
      },
      new String [] {
        "Property", "Status"
      }
    ) {
      boolean[] canEdit = new boolean [] {
        false, false
      };

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    statusTable.setName("statusTable"); // NOI18N
    statusScrollPane.setViewportView(statusTable);
    statusTable.getColumnModel().getColumn(0).setResizable(false);
    statusTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("FetcherStats.statusTable.columnModel.title0")); // NOI18N
    statusTable.getColumnModel().getColumn(0).setCellRenderer(null);
    statusTable.getColumnModel().getColumn(1).setResizable(false);
    statusTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("FetcherStats.statusTable.columnModel.title1")); // NOI18N
    statusTable.getColumnModel().getColumn(1).setCellRenderer(null);
    statusTable.setDefaultRenderer (JLabel.class, new TableCellRenderer () {
      @Override
      public Component getTableCellRendererComponent (JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        return (JLabel) value;
      }
    });

    statusPanel.add(statusScrollPane);

    containerPanel.add(statusPanel, BorderLayout.NORTH);

    statsPanel.setBorder(BorderFactory.createTitledBorder(LookFeel.getDefaultBorder (), bundle.getString("FetcherStats.statsPanel.border.title"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, LookFeel.getFont (true, 1))); // NOI18N
    statsPanel.setName("statsPanel"); // NOI18N
    statsPanel.setPreferredSize(new Dimension(300, 200));
    statsPanel.setLayout(new BoxLayout(statsPanel, BoxLayout.LINE_AXIS));

    statsScrollPane.setName("statsScrollPane"); // NOI18N

    statsTable.setModel(new DefaultTableModel(
      new Object [][] {
        {null, null},
        {null, null},
        {null, null},
        {null, null}
      },
      new String [] {
        "Status", "Count"
      }
    ) {
      boolean[] canEdit = new boolean [] {
        false, false
      };

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    statsTable.setName("statsTable"); // NOI18N
    statsScrollPane.setViewportView(statsTable);
    statsTable.getColumnModel().getColumn(0).setResizable(false);
    statsTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("FetcherStats.statsTable.columnModel.title0")); // NOI18N
    statsTable.getColumnModel().getColumn(0).setCellRenderer(null);
    statsTable.getColumnModel().getColumn(1).setResizable(false);
    statsTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("FetcherStats.statsTable.columnModel.title1")); // NOI18N
    statsTable.getColumnModel().getColumn(1).setCellRenderer(null);
    statsTable.setDefaultRenderer (JLabel.class, new TableCellRenderer() {
      @Override
      public Component getTableCellRendererComponent (JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        return (JLabel) value;
      }
    });

    statsPanel.add(statsScrollPane);

    containerPanel.add(statsPanel, BorderLayout.CENTER);

    graphPanel.setBorder(BorderFactory.createTitledBorder(LookFeel.getDefaultBorder (), bundle.getString("FetcherStats.graphPanel.border.title"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, LookFeel.getFont (true, 1))); // NOI18N
    graphPanel.setName("graphPanel"); // NOI18N
    graphPanel.setPreferredSize(new Dimension(300, 200));
    graphPanel.setLayout(new BoxLayout(graphPanel, BoxLayout.LINE_AXIS));

    fetcherStatusCodes.setName("fetcherStatusCodes"); // NOI18N
    graphPanel.add(fetcherStatusCodes);

    containerPanel.add(graphPanel, BorderLayout.SOUTH);

    getContentPane().add(containerPanel);

    pack();
  }//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JPanel containerPanel;
  private FetcherStatusCodes fetcherStatusCodes;
  private JPanel graphPanel;
  private JPanel statsPanel;
  private JScrollPane statsScrollPane;
  private JTable statsTable;
  private JPanel statusPanel;
  private JScrollPane statusScrollPane;
  private JTable statusTable;
  // End of variables declaration//GEN-END:variables
}
