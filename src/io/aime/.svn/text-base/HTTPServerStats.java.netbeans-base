package io.aime;

// AIME
import io.aime.renderers.CustomTableRenderer;
import io.aime.util.LookFeel;

// AWT
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

// Log4J
import org.apache.log4j.Logger;

// Swing
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.WindowConstants;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;

public class HTTPServerStats extends JFrame {

  private static final Logger LOG = Logger.getLogger (HTTPServerStats.class.getName ());
  private static final int UPDATE_INTERVAL = 10000;
  private io.aime.stats.HTTPServerStats model = new io.aime.stats.HTTPServerStats ();
  private static HTTPServerStats thisFrame = null;
  private UpdateStatsTable updater;
  private Initiator initiator = new Initiator ();
  private Utilities utilities;

  private HTTPServerStats () {
    this.initiator.initHandlers ();
    this.initiator.init ();
  }

  private class Initiator {

    void initHandlers () {
      HTTPServerStats.this.utilities = new Utilities ();
    }

    void init () {
      // Build the window.
      HTTPServerStats.this.initComponents ();
      // Updaters.
      HTTPServerStats.this.updater = new UpdateStatsTable (statsTable);
      HTTPServerStats.this.utilities.startStatsTableUpdater ();
    }
  }

  private class Utilities {

    void updateStatsTable () {
    }

    void startStatsTableUpdater () {
      try {
        HTTPServerStats.this.updater.start ();
      }
      catch (Exception e) {
        LOG.error ("Error starting table updater thread. Error: " + e.toString (), e);
      }

      if (LOG.isInfoEnabled ()) {
        LOG.info ("Table updater started.");
      }
    }

    void stopStatsTableUpdater () {
      try {
        HTTPServerStats.this.updater.stop ();
      }
      catch (Exception e) {
        LOG.error ("Error stopping table updater thread. Error: " + e.toString (), e);
      }

      if (LOG.isInfoEnabled ()) {
        LOG.info ("Table updater stopped.");
      }
    }

    void exit () {
      HTTPServerStats.this.utilities.stopStatsTableUpdater (); // Stop timers.
      HTTPServerStats.this.dispose (); // Dispose window.
    }
  }

  public static void build () {
    if (HTTPServerStats.thisFrame != null) {
      if (!HTTPServerStats.thisFrame.isVisible ()) {
        HTTPServerStats.thisFrame.setVisible (true);
        HTTPServerStats.thisFrame.utilities.startStatsTableUpdater (); // Start updaters.
      }
      else {
        HTTPServerStats.thisFrame.toFront (); // Bring opened one to front.
      }
    }
    else { // Create a new window.
      EventQueue.invokeLater (new Runnable () {
        @Override
        public void run () {
          HTTPServerStats.thisFrame = new HTTPServerStats ();
          HTTPServerStats.thisFrame.setLocationRelativeTo (Main.thisFrame);
          HTTPServerStats.thisFrame.setVisible (true);
          // Override the default frame close method.
          HTTPServerStats.thisFrame.addWindowListener (new WindowAdapter () {
            @Override
            public void windowClosing (WindowEvent e) {
              HTTPServerStats.thisFrame.utilities.exit ();
            }
          });
        }
      });
    }
  }

  private class UpdateStatsTable extends Timer implements ActionListener {

    private UpdateStatsTable (JTable table) {
      super (HTTPServerStats.UPDATE_INTERVAL, null);
      super.addActionListener (this);
    }

    @Override
    public void actionPerformed (ActionEvent event) {
      HTTPServerStats.this.utilities.updateStatsTable ();
    }
  }

  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    requestedDataStatsPanel = new JPanel();
    statsScrollPane = new JScrollPane();
    statsTable = new JTable();

    setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("Cerebellum Stats Window");
    setResizable(false);
    getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.LINE_AXIS));

    requestedDataStatsPanel.setBorder(BorderFactory.createTitledBorder(LookFeel.DEFAULT_BORDER, "Stats", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION, new Font(LookFeel.getFontBold(),Font.BOLD,LookFeel.getDefaultFontSize(2))));
    requestedDataStatsPanel.setPreferredSize(new Dimension(300, 100));
    requestedDataStatsPanel.setLayout(new BoxLayout(requestedDataStatsPanel, BoxLayout.LINE_AXIS));

    statsTable.setModel(new DefaultTableModel(
      new Object [][] {
        {null, null},
        {null, null},
        {null, null},
        {null, null}
      },
      new String [] {
        "Data Requested", "Count"
      }
    ) {
      boolean[] canEdit = new boolean [] {
        false, false
      };

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    statsScrollPane.setViewportView(statsTable);
    statsTable.getColumnModel().getColumn(0).setCellRenderer(new CustomTableRenderer().getCustomRenderer(null,true));
    statsTable.getColumnModel().getColumn(1).setCellRenderer(new CustomTableRenderer().getCustomRenderer(null,true));

    requestedDataStatsPanel.add(statsScrollPane);

    getContentPane().add(requestedDataStatsPanel);

    pack();
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JPanel requestedDataStatsPanel;
  private JScrollPane statsScrollPane;
  private JTable statsTable;
  // End of variables declaration//GEN-END:variables
}
