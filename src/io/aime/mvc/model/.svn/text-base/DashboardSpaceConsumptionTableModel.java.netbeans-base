package io.aime.mvc.model;

// AIME
import io.aime.util.AIMEConfiguration;
import io.aime.util.AIMEConstants;
import io.aime.util.GeneralUtilities;

// AWT
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

// Apache Hadoop
import org.apache.hadoop.conf.Configuration;

// Util
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

// Swing
import javax.swing.JLabel;
import javax.swing.Timer;
import javax.swing.table.AbstractTableModel;

public class DashboardSpaceConsumptionTableModel extends AbstractTableModel {

    public final byte KEY_COLUMN_ID = 0x0;
    public final byte VALUE_COLUMN_ID = 0x1;
    public final byte MAIN_DBASE_SIZE_ROW_ID = 0x0;
    public final byte HADOOP_FILES_SIZE_ROW_ID = 0x1;
    public final byte LOGS_SIZE_ROW_ID = 0x2;
    public final byte KERNEL_INDEX_SIZE_ROW_ID = 0x3;
    public final byte KERNEL_DATA_SIZE_ROW_ID = 0x4;
    private List<List<Object>> rows = new ArrayList<List<Object>>();
    private List<String> columns = new ArrayList<String>(Arrays.asList("Key", "Value"));

    public DashboardSpaceConsumptionTableModel() {
        // Build model.
        super();

        // Create rows.
        Configuration conf = new AIMEConfiguration().create();
        addRow(Arrays.asList(new Object[]{"Main DBase:", GeneralUtilities.getFolderSize(new String[]{AIMEConstants.MAINDBASE_PATH.getStringConstant()})}));
        addRow(Arrays.asList(new Object[]{"Hadoop Files:", GeneralUtilities.getFolderSize(new String[]{conf.get("mapred.local.dir"), conf.get("hadoop.tmp.dir")})}));
        addRow(Arrays.asList(new Object[]{"Logs:", GeneralUtilities.getFolderSize(new String[]{AIMEConstants.LOGS_PATH.getStringConstant()})}));
        addRow(Arrays.asList(new Object[]{"Kernel Index:", GeneralUtilities.getFolderSize(new String[]{AIMEConstants.KERNEL_INDEX_PATH.getStringConstant()})}));
        addRow(Arrays.asList(new Object[]{"Kernel Data:", GeneralUtilities.getFolderSize(new String[]{AIMEConstants.SEGMENTDBASE_PATH.getStringConstant()})}));

        // Add timer.
        new Timer(conf.getInt("aime.dashboard.table.model.refresh", 1000), new DataListener()).start();
    }

    @Override
    public String getColumnName(int col) {
        return (String) columns.get(col);
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {
        switch (columnIndex) {
            default:
                return JLabel.class;
        }
    }

    @Override
    public int getColumnCount() {
        return columns.size();
    }

    @Override
    public int getRowCount() {
        return rows.size();
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        List rowList = (List) rows.get(rowIndex);
        if (columnIndex < rowList.size()) {
            return rowList.get(columnIndex);
        }

        return null;
    }

    @Override
    public boolean isCellEditable(int row, int col) {
        switch (col) {
            default:
                return false;
        }
    }

    @Override
    public void setValueAt(Object value, int row, int col) {
        List rowList = (List) rows.get(row);
        if (col >= rowList.size()) {
            while (col >= rowList.size()) {
                rowList.add(null);
            }
        }
        rowList.set(col, value);
        fireTableCellUpdated(row, col);
    }

    private int addRow(List<Object> row) {
        rows.add(row);
        fireTableRowsInserted(rows.size() - 1, rows.size() - 1);

        return (rows.size() - 1);
    }

    private int updateCell(Object newValue, int row, int col) {
        rows.get(row).set(col, newValue);
        fireTableCellUpdated(row, col);

        return (rows.size() - 1);
    }

    class DataListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            Configuration conf = new AIMEConfiguration().create();
            updateCell(GeneralUtilities.getFolderSize(new String[]{AIMEConstants.MAINDBASE_PATH.getStringConstant()}), MAIN_DBASE_SIZE_ROW_ID, VALUE_COLUMN_ID);
            updateCell(GeneralUtilities.getFolderSize(new String[]{conf.get("mapred.local.dir"), conf.get("hadoop.tmp.dir")}), HADOOP_FILES_SIZE_ROW_ID, VALUE_COLUMN_ID);
            updateCell(GeneralUtilities.getFolderSize(new String[]{AIMEConstants.LOGS_PATH.getStringConstant()}), LOGS_SIZE_ROW_ID, VALUE_COLUMN_ID);
            updateCell(GeneralUtilities.getFolderSize(new String[]{AIMEConstants.KERNEL_INDEX_PATH.getStringConstant()}), KERNEL_INDEX_SIZE_ROW_ID, VALUE_COLUMN_ID);
            updateCell(GeneralUtilities.getFolderSize(new String[]{AIMEConstants.SEGMENTDBASE_PATH.getStringConstant()}), KERNEL_DATA_SIZE_ROW_ID, VALUE_COLUMN_ID);
        }
    }
}
