package io.aime.mvc.model;

import io.aime.bot.ConsoleMessage;
import io.aime.cerebellum.CerebellumDHI;
import io.aime.util.AIMEConfiguration;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

public class AIMEBotConsoleDocumentModel extends DefaultStyledDocument
{

    private Timer timer = new Timer(
            new AIMEConfiguration().create().getInt("aime.botconsole.table.model.refresh", 1000),
            new DataListener());

    public AIMEBotConsoleDocumentModel()
    {
        super();
        timer.start();
    }

    public void start()
    {
        timer.start();
    }

    public void stop()
    {
        timer.stop();
    }

    public void showAll()
    {
        ConsoleMessage[] msgs = (ConsoleMessage[]) CerebellumDHI.getInstance().obtainLocalData(CerebellumDHI.BOT_CONSOLE, CerebellumDHI.BOT_CONSOLE_GET_ALL).get();
        for (ConsoleMessage msg : msgs)
        {
            insertMessage(msg);
        }
    }

    void insertMessage(ConsoleMessage data)
    {
        if (!data.isEmpty())
        {
            try
            {
                StyleContext sc = StyleContext.getDefaultStyleContext();
                AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Alignment, StyleConstants.ALIGN_LEFT);
                switch (data.getSeverity())
                {
                    case ConsoleMessage.INFO:
                        insertString(getLength(), "INFO  =>" + data.getMessage() + "\n", aset);
                        break;
                    case ConsoleMessage.WARN:
                        insertString(getLength(), "WARN  =>" + data.getMessage() + "\n", aset);
                        break;
                    case ConsoleMessage.ERROR:
                        insertString(getLength(), "ERROR =>" + data.getMessage() + "\n", aset);
                        break;
                }
            }
            catch (BadLocationException e)
            {
                // Do something
            }
        }
    }

    class DataListener implements ActionListener
    {

        @Override
        public void actionPerformed(ActionEvent evt)
        {
            insertMessage((ConsoleMessage) CerebellumDHI.getInstance().obtainLocalData(CerebellumDHI.BOT_CONSOLE, CerebellumDHI.BOT_CONSOLE_MESSAGE).get());
        }
    }
}
