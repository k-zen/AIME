package io.aime.mvc.view;

// AIME
import io.aime.About;
import io.aime.Cerebellum;
import io.aime.CrawlJob;
import io.aime.Fetcher;
import io.aime.Filters;
import io.aime.Kernel;
import io.aime.ReadMainDBase;
import io.aime.ReadSegmentDBase;
import io.aime.SeedServer;
import io.aime.cerebellum.CerebellumDHI;
import io.aime.kernel.IndexServerSkeleton;
import io.aime.kernel.SegmentServerSkeleton;
import io.aime.kernel.indexserver.ISStatsAgentData;
import io.aime.kernel.segmentserver.SSStatsAgentData;
import io.aime.util.AIMEConfiguration;
import io.aime.util.DigitsTools;
import io.aime.util.HtmlMessageBuilder;
import io.aime.util.LookFeel;

// AWT
import java.awt.event.ActionEvent;

// IO
import java.io.IOException;

// Log4j
import org.apache.log4j.Logger;

// Swing
import javax.swing.JComponent;
import javax.swing.JOptionPane;

public class MainEventHandler {

    private static final Logger LOG = Logger.getLogger(MainEventHandler.class.getName());
    final byte NEW_CRAWL_WIN = 0x1;
    final byte RESUME_CRAWL_WIN = 0x2;
    final byte READ_MAIN_DBASE_WIN = 0x3;
    final byte READ_SEG_DBASE_WIN = 0x4;
    final byte MANAGE_FILTERS_WIN = 0x5;
    final byte MANAGE_SEEDS_WIN = 0x6;
    final byte QUICK_FETCH_WIN = 0x7;
    final byte URL_INJECTOR_WIN = 0x8;
    final byte CEREBELLUM_WIN = 0x9;
    final byte FETCHER_WIN = 0x10;
    final byte HTTP_SERVER_WIN = 0x11;
    final byte KERNEL_WIN = 0x12;
    final byte ABOUT_WIN = 0x13;
    final byte BUY_WIN = 0x14;
    final byte DOCUMENTATION_WIN = 0x15;

    void openWindow(ActionEvent evt, byte windowType) {
        switch (windowType) {
            case NEW_CRAWL_WIN:
                CrawlJob.build(false);
                break;
            case RESUME_CRAWL_WIN:
                CrawlJob.build(true);
                break;
            case READ_MAIN_DBASE_WIN:
                ReadMainDBase.build();
                break;
            case READ_SEG_DBASE_WIN:
                ReadSegmentDBase.build();
                break;
            case MANAGE_FILTERS_WIN:
                Filters.build();
                break;
            case MANAGE_SEEDS_WIN:
                SeedServer.build();
                break;
            case QUICK_FETCH_WIN:
                // #TODO
                break;
            case URL_INJECTOR_WIN:
                // #TODO
                break;
            case CEREBELLUM_WIN:
                Cerebellum.build();
                break;
            case FETCHER_WIN:
                Fetcher.build();
                break;
            case HTTP_SERVER_WIN:
                // #TODO
                break;
            case KERNEL_WIN:
                Kernel.build();
                break;
            case ABOUT_WIN:
                About.build();
                break;
            case BUY_WIN:
                // #TODO
                break;
            case DOCUMENTATION_WIN:
                // #TODO
                break;
        }
    }

    void cleanPreviousJobs(JComponent ref, ActionEvent evt) {
        if (io.aime.cerebellum.Cerebellum.executeFunction(io.aime.cerebellum.Cerebellum.CLEAR_AIME_JOBS, new AIMEConfiguration().create())) {
            JOptionPane.showMessageDialog(
                    ref,
                    HtmlMessageBuilder.buildOnlyOneParagraphMsg("All previous crawling jobs has been cleaned up!"),
                    "Information",
                    JOptionPane.INFORMATION_MESSAGE,
                    LookFeel.getIcon("Info.png"));
        }
        else {
            JOptionPane.showMessageDialog(
                    ref,
                    HtmlMessageBuilder.buildOnlyOneParagraphMsg("Previous crawling couldn't be cleaned up!"),
                    "Information",
                    JOptionPane.INFORMATION_MESSAGE,
                    LookFeel.getIcon("Info.png"));
        }
    }

    public void exitMenuItemActionPerformed(JComponent ref, ActionEvent evt) {
        int r1 = JOptionPane.showConfirmDialog(
                ref,
                HtmlMessageBuilder.buildOnlyOneParagraphMsg("Are you sure you want to leave the application ...?"),
                "Exit AIME Confirmation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                LookFeel.getIcon("Exit.png"));
        if (r1 == JOptionPane.YES_OPTION) {
            // Ask to shutdown Index & Segment servers as well.
            int r2 = JOptionPane.showConfirmDialog(
                    ref,
                    HtmlMessageBuilder.buildOnlyOneParagraphMsg("Would you like to shutdown the Kernel as well ...?"),
                    "Kernel Shutdown Confirmation",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    LookFeel.getIcon("Exit.png"));
            if (r2 == JOptionPane.YES_OPTION) {
                io.aime.kernel.Kernel.INDEX_SERVER_FACTORY.killServer(io.aime.kernel.Kernel.INDEX_SERVER_FACTORY, new AIMEConfiguration().create());
                io.aime.kernel.Kernel.SEGMENT_SERVER_FACTORY.killServer(io.aime.kernel.Kernel.SEGMENT_SERVER_FACTORY, new AIMEConfiguration().create());
            }

            System.exit(0); // Shutdown AIME.
        }
    }

    void cleanIndexServer(JComponent ref, ActionEvent evt) {
        int response = JOptionPane.showConfirmDialog(
                ref,
                HtmlMessageBuilder.buildOnlyOneParagraphMsg("Are you sure you want to delete the kernel's index ...?<br/>" + this.getKernelIndexStats()),
                "Delete Confirmation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                LookFeel.getIcon("Question.png"));
        if (response == JOptionPane.YES_OPTION) {
            if (this.cleanKernelIndex()) {
                JOptionPane.showMessageDialog(
                        ref,
                        HtmlMessageBuilder.buildOnlyOneParagraphMsg("The kernel's index has been cleaned up!"),
                        "Information",
                        JOptionPane.INFORMATION_MESSAGE,
                        LookFeel.getIcon("Info.png"));
            }
            else {
                JOptionPane.showMessageDialog(
                        ref,
                        HtmlMessageBuilder.buildOnlyOneParagraphMsg("The kernel's index couldn't be cleaned up!"),
                        "Warning",
                        JOptionPane.WARNING_MESSAGE,
                        LookFeel.getIcon("Alert.png"));
            }
        }
    }

    void cleanSegmentServer(JComponent ref, ActionEvent evt) {
        int response = JOptionPane.showConfirmDialog(
                ref,
                HtmlMessageBuilder.buildOnlyOneParagraphMsg("Are you sure you want to delete the kernel's segments ...?<br/>" + this.getKernelSegmentsStats()),
                "Delete Confirmation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                LookFeel.getIcon("Question.png"));
        if (response == JOptionPane.YES_OPTION) {
            if (this.cleanKernelSegments()) {
                JOptionPane.showMessageDialog(
                        ref,
                        HtmlMessageBuilder.buildOnlyOneParagraphMsg("The kernel's segments has been cleaned up!"),
                        "Information",
                        JOptionPane.INFORMATION_MESSAGE,
                        LookFeel.getIcon("Info.png"));
            }
            else {
                JOptionPane.showMessageDialog(
                        ref,
                        HtmlMessageBuilder.buildOnlyOneParagraphMsg("The kernel's segments couldn't be cleaned up!"),
                        "Warning",
                        JOptionPane.WARNING_MESSAGE,
                        LookFeel.getIcon("Alert.png"));
            }
        }
    }

    void shutdownIndexServer(JComponent ref, ActionEvent evt) {
        io.aime.kernel.Kernel.INDEX_SERVER_FACTORY.killServer(io.aime.kernel.Kernel.INDEX_SERVER_FACTORY, new AIMEConfiguration().create());
    }

    void shutdownSegmentServer(JComponent ref, ActionEvent evt) {
        io.aime.kernel.Kernel.SEGMENT_SERVER_FACTORY.killServer(io.aime.kernel.Kernel.SEGMENT_SERVER_FACTORY, new AIMEConfiguration().create());
    }

    boolean cleanKernelIndex() {
        IndexServerSkeleton kernel = null;
        try {
            kernel = io.aime.kernel.Kernel.INDEX_SERVER_FACTORY.getIndexServerClient(io.aime.kernel.Kernel.INDEX_SERVER_FACTORY, new AIMEConfiguration().create());
        }
        catch (IOException ex) {
            LOG.fatal("Impossible to connect to kernel instance. Error: " + ex.toString(), ex);
        }

        if (kernel != null) {
            return kernel.cleanIndex().get();
        }
        else {
            return false;
        }
    }

    boolean cleanKernelSegments() {
        SegmentServerSkeleton kernel = null;
        try {
            kernel = io.aime.kernel.Kernel.SEGMENT_SERVER_FACTORY.getSegmentServerClient(io.aime.kernel.Kernel.SEGMENT_SERVER_FACTORY, new AIMEConfiguration().create());
        }
        catch (IOException ex) {
            LOG.fatal("Impossible to connect to kernel instance. Error: " + ex.toString(), ex);
        }

        if (kernel != null) {
            return kernel.cleanSegments().get();
        }
        else {
            return false;
        }
    }

    String getKernelIndexStats() {
        ISStatsAgentData data = (ISStatsAgentData) new CerebellumDHI().obtainLocalData(CerebellumDHI.CEREBELLUM_DATA, CerebellumDHI.IS_STATS_DATA).get();

        StringBuilder buf = new StringBuilder();
        buf.append("<br/>");
        buf.append("Kernel Stats:<br/>");
        buf.append("Total Index Size: ").append(DigitsTools.humanReadableByteCount(data.getIndexSize(), false)).append("<br/>");
        buf.append("Number of Documents: ").append(data.getNumberOfDocs()).append(" documents");

        return buf.toString();
    }

    String getKernelSegmentsStats() {
        SSStatsAgentData data = (SSStatsAgentData) new CerebellumDHI().obtainLocalData(CerebellumDHI.CEREBELLUM_DATA, CerebellumDHI.SS_STATS_DATA).get();

        StringBuilder buf = new StringBuilder();
        buf.append("<br/>");
        buf.append("Segments Stats:<br/>");
        buf.append("Total Segments Size: ").append(DigitsTools.humanReadableByteCount(data.getSegmentsSize(), false)).append("<br/>");
        buf.append("Number of Segments: ").append(data.getNumberOfSegments()).append(" segments");

        return buf.toString();
    }
}
