package io.aime.mvc.view;

import io.aime.bot.ConsoleMessage;
import io.aime.cerebellum.CerebellumDHI;
import io.aime.segment.SegmentReader;
import io.aime.util.AIMEConfiguration;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.io.IOException;
import java.net.URISyntaxException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import net.apkc.emma.mvc.AbstractController;
import net.apkc.emma.mvc.AbstractViewPanel;
import net.apkc.emma.tasks.Task;
import net.apkc.emma.tasks.TasksHandler;
import org.apache.hadoop.io.ObjectWritable;
import org.apache.hadoop.io.Text;

final class SegmentDBaseViewPanel extends AbstractViewPanel
{

    final static AbstractViewPanel newBuild()
    {
        return new SegmentDBaseViewPanel();
    }

    private SegmentDBaseViewPanel()
    {
        createComponent().configure(null).markVisibility(true);
    }

    @Override
    protected AbstractViewPanel createComponent()
    {
        initComponents();
        return this;
    }

    @Override
    public AbstractViewPanel configure(Object o)
    {
        // ALLOWED ACTIONS
        // CONTROLLERS
        // CONFIGURE MODELS
        // CONFIGURE VIEWS
        return this;
    }

    @Override
    public void modelPropertyChange(PropertyChangeEvent evt)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public AbstractController getController()
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private class SegmentDBaseViewPanelEvt implements ActionListener, HyperlinkListener
    {

        @Override
        public void actionPerformed(ActionEvent e)
        {
            if (e.getSource() == launchButton)
            {
                launch(SegmentDBaseViewPanel.this);
            }
        }

        /**
         * Launches a given task.
         *
         * @param ref A window reference
         */
        void launch(JPanel ref)
        {
            searchProgressBar.setIndeterminate(true);
            launchButton.setEnabled(false); // Disable button
            try
            {
                TasksHandler.getInstance().submitFiniteTask(new RunSegmentDBaseJobTask().setTask(functionsComboBox.getSelectedIndex()));
            }
            catch (Exception e)
            {
                // LOG.error("Problem launching task. Error: " + e.toString(), e);
                CerebellumDHI.getInstance().modifyLocalData(
                        CerebellumDHI.BOT_CONSOLE,
                        CerebellumDHI.BOT_CONSOLE_MESSAGE,
                        new ObjectWritable(ConsoleMessage.newBuild().setSeverity(ConsoleMessage.ERROR).setMessage("Error processing MainDBase task!")));
            }
        }

        @Override
        public void hyperlinkUpdate(final HyperlinkEvent e)
        {
            if (e.getEventType() == HyperlinkEvent.EventType.ENTERED)
            {
                EventQueue.invokeLater(new Runnable()
                {
                    @Override
                    public void run()
                    {
                        SwingUtilities.getWindowAncestor(resultsTextPane).setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)); // Show hand cursor
                        resultsTextPane.setToolTipText(e.getURL().toExternalForm()); // Show URL as the tooltip
                    }
                });
            }
            else if (e.getEventType() == HyperlinkEvent.EventType.EXITED)
            {
                EventQueue.invokeLater(new Runnable()
                {
                    @Override
                    public void run()
                    {
                        SwingUtilities.getWindowAncestor(resultsTextPane).setCursor(Cursor.getDefaultCursor()); // Show default cursor
                        resultsTextPane.setToolTipText(null); // Reset tooltip
                    }
                });
            }
            else if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED)
            {
                if (Desktop.isDesktopSupported())
                {
                    try
                    {
                        Desktop.getDesktop().browse(e.getURL().toURI());
                    }
                    catch (URISyntaxException | IOException ex)
                    {
                        // LOG.error("Generic error on link listener.", ex);
                    }
                }
                else
                {
                    // LOG.error("Hyperlinking not supported here.");
                }
            }
        }
    }

    private class RunSegmentDBaseJobTask extends Task
    {

        private int task;

        public RunSegmentDBaseJobTask setTask(int task)
        {
            this.task = task;
            return this;
        }

        @Override
        protected Object doInBackground() throws Exception
        {
            switch (task)
            {
                case 0:
                    try
                    {
                        resultsTextPane.setText(SegmentReader.getInstance().list(new AIMEConfiguration().create()).toString());
                        searchProgressBar.setIndeterminate(false);
                        launchButton.setEnabled(true); // Revert to old icon and enable button.

                        return true;
                    }
                    catch (IOException ex)
                    {
                        // LOG.fatal("Impossible to launch job Main DBase statistics. Error: " + ex.toString(), ex);
                    }
                    break;
                case 1:
                    String msg2
                           = "<html>"
                            + "<body>"
                            + "<p>"
                            + "<b>Please enter the URL in the box bellow:</b>"
                            + "<br/>"
                            + "<b><u>Example:</u></b> http://www.example.com"
                            + "</p>"
                            + "</body>"
                            + "</html>";
                    String userInput = JOptionPane.showInputDialog(SegmentDBaseViewPanel.this, msg2, "Enter URL", JOptionPane.PLAIN_MESSAGE);
                    if (userInput == null || userInput.isEmpty())
                    {
                        break;
                    }

                    try
                    {
                        resultsTextPane.setText(SegmentReader.getInstance().get(new Text(userInput), new AIMEConfiguration().create()).toString());
                        searchProgressBar.setIndeterminate(false);
                        launchButton.setEnabled(true); // Revert to old icon and enable button.

                        return true;
                    }
                    catch (IOException ex)
                    {
                        // LOG.fatal("Impossible to launch job Main DBase statistics. Error: " + ex.toString(), ex);
                    }
                    break;
            }

            return false;
        }

        @Override
        public void reportProgress(int progress)
        {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        containerPanel = new javax.swing.JPanel();
        toolsPanel = new javax.swing.JPanel();
        optionsPanel = new javax.swing.JPanel();
        functionsComboBox = new javax.swing.JComboBox();
        launchButton = new javax.swing.JButton();
        progressPanel = new javax.swing.JPanel();
        searchProgressBar = new javax.swing.JProgressBar();
        resultsPanel = new javax.swing.JPanel();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsTextPane = new javax.swing.JTextPane();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        containerPanel.setName("containerPanel"); // NOI18N
        containerPanel.setPreferredSize(new java.awt.Dimension(600, 300));
        containerPanel.setLayout(new java.awt.BorderLayout());

        toolsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tools"));
        toolsPanel.setName("toolsPanel"); // NOI18N
        toolsPanel.setLayout(new java.awt.GridLayout(2, 1));

        optionsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        optionsPanel.setName("optionsPanel"); // NOI18N
        optionsPanel.setLayout(new java.awt.BorderLayout());

        functionsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Stats", "Get Document Information" }));
        functionsComboBox.setName("functionsComboBox"); // NOI18N
        optionsPanel.add(functionsComboBox, java.awt.BorderLayout.CENTER);

        launchButton.setMnemonic('l');
        launchButton.setText("Launch Query");
        launchButton.setName("launchButton"); // NOI18N
        launchButton.addActionListener(new SegmentDBaseViewPanelEvt());
        optionsPanel.add(launchButton, java.awt.BorderLayout.EAST);

        toolsPanel.add(optionsPanel);

        progressPanel.setName("progressPanel"); // NOI18N
        progressPanel.setLayout(new javax.swing.BoxLayout(progressPanel, javax.swing.BoxLayout.LINE_AXIS));

        searchProgressBar.setName("searchProgressBar"); // NOI18N
        progressPanel.add(searchProgressBar);

        toolsPanel.add(progressPanel);

        containerPanel.add(toolsPanel, java.awt.BorderLayout.NORTH);

        resultsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Viewer"));
        resultsPanel.setName("resultsPanel"); // NOI18N
        resultsPanel.setLayout(new javax.swing.BoxLayout(resultsPanel, javax.swing.BoxLayout.LINE_AXIS));

        resultsScrollPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        resultsScrollPane.setAutoscrolls(true);
        resultsScrollPane.setName("resultsScrollPane"); // NOI18N

        resultsTextPane.setEditable(false);
        resultsTextPane.setContentType("text/html"); // NOI18N
        resultsTextPane.setName("resultsTextPane"); // NOI18N
        resultsTextPane.addHyperlinkListener(new SegmentDBaseViewPanelEvt());
        resultsScrollPane.setViewportView(resultsTextPane);

        resultsPanel.add(resultsScrollPane);

        containerPanel.add(resultsPanel, java.awt.BorderLayout.CENTER);

        add(containerPanel);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel containerPanel;
    private javax.swing.JComboBox functionsComboBox;
    private javax.swing.JButton launchButton;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JPanel progressPanel;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JTextPane resultsTextPane;
    private javax.swing.JProgressBar searchProgressBar;
    private javax.swing.JPanel toolsPanel;
    // End of variables declaration//GEN-END:variables
}
