package io.aime.mvc.view;

// AWT
import java.awt.GridLayout;
import java.awt.Font;

// IO
import io.aime.mvc.controller.FilterRuleController;
import io.aime.mvc.model.FilterSiteRuleTableModel;
import io.aime.mvc.model.FilterURLRuleTableModel;
import io.aime.util.HtmlMessageBuilder;
import io.aime.util.LookFeel;

// Log4j
import org.apache.log4j.Logger;

// Swing
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;

// Util
import java.util.ArrayList;
import java.util.List;

public class FilterRuleEventHandler {

    private static final Logger LOG = Logger.getLogger(FilterRuleEventHandler.class.getName());
    static final byte MODEL1_ID = 0x1;
    static final byte MODEL2_ID = 0x2;

    /**
     * Adds a given rule entered by the user to a given table model.
     *
     * @param controller The controller
     * @param model1     URL rules table model
     * @param model2     Site rules table model
     * @param ref        A window reference
     * @param modelId    Which model to use
     */
    void addRule(FilterRuleController controller, FilterURLRuleTableModel model1, FilterSiteRuleTableModel model2, JPanel ref, byte modelId) {
        JPanel panel = new JPanel();

        JLabel title = new JLabel(HtmlMessageBuilder.buildOnlyOneParagraphMsg("Please enter the Rule in the box bellow."));

        JLabel patternText = new JLabel(HtmlMessageBuilder.buildOnlyOneParagraphMsg("Pattern:"));
        JTextField pattern = new JTextField();

        JLabel signText = new JLabel(HtmlMessageBuilder.buildOnlyOneParagraphMsg("Sign:"));
        JComboBox sign = new JComboBox(new String[]{"Allow", "Deny"});
        sign.setFont(sign.getFont().deriveFont(sign.getFont().getStyle() | Font.BOLD, 10));
        sign.setSelectedIndex(0);

        panel.setLayout(new GridLayout(5, 1));
        panel.add(title);
        panel.add(patternText);
        panel.add(pattern);
        panel.add(signText);
        panel.add(sign);

        pattern.addAncestorListener(new RequestFocusListener());

        if (JOptionPane.showConfirmDialog(ref, panel, "Enter Rule", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE) == JOptionPane.OK_OPTION) {
            List<Object> rule = new ArrayList<Object>();
            rule.add(pattern.getText());
            rule.add(sign.getItemAt(sign.getSelectedIndex()).toString().equalsIgnoreCase("allow") ? true : false);
            rule.add(false);

            switch (modelId) {
                case MODEL1_ID:
                    model1.addNewRow(rule);
                    break;
                case MODEL2_ID:
                    model2.addNewRow(rule);
                    break;
            }
        }
    }

    /**
     * Removes a given rule from the table model.
     *
     * @param controller The controller
     * @param model1     URL rules table model
     * @param model2     Site rules table model
     * @param ref        A window reference
     * @param modelId    Which model to use
     */
    void removeRule(FilterRuleController controller, FilterURLRuleTableModel model1, FilterSiteRuleTableModel model2, JPanel ref, JTable tab, byte modelId) {
        // Traverse all rows, to see if a filter has been marked for deletion.
        int selected = 0;
        for (int k = 0; k < tab.getRowCount(); k++) {
            if ((Boolean) tab.getValueAt(k, 2)) {
                selected++;
            }
        }

        // If there are seeds marked for removal, then ask the user if he wants to continue.
        if (selected > 0) {
            // Ask the user.
            int response = JOptionPane.showConfirmDialog(
                    ref,
                    HtmlMessageBuilder.buildOnlyOneParagraphMsg("Are you sure you want to do this...?"),
                    "Delete Filter Confirmation",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    LookFeel.getIcon("Question.png"));
            if (response == JOptionPane.YES_OPTION) {
                // Traverser again the filters, and remove the ones that are marked.
                for (int k = tab.getRowCount() - 1; k >= 0; k--) {
                    if ((Boolean) tab.getValueAt(k, 2)) {
                        switch (modelId) {
                            case MODEL1_ID:
                                model1.deleteRow(k);
                                break;
                            case MODEL2_ID:
                                model2.deleteRow(k);
                                break;
                        }
                    }
                }
            }
        }
        else {
            JOptionPane.showMessageDialog(
                    ref,
                    HtmlMessageBuilder.buildOnlyOneParagraphMsg("First select the filters you want to remove."),
                    "Info",
                    JOptionPane.INFORMATION_MESSAGE,
                    LookFeel.getIcon("Info.png"));
        }
    }
}
