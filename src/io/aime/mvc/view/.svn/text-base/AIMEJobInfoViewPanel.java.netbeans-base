package io.aime.mvc.view;

import io.aime.cerebellum.CerebellumDHI;
import io.aime.mvc.controller.MainController;
import io.aime.mvc.model.MainModel;
import io.aime.util.AIMEConfiguration;
import io.aime.util.AIMEConstants;
import io.aime.util.GeneralUtilities;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.text.ParseException;
import java.util.Locale;
import javax.swing.Timer;
import net.apkc.emma.mvc.AbstractController;
import net.apkc.emma.mvc.AbstractViewPanel;
import org.apache.hadoop.conf.Configuration;
import org.apache.lucene.document.DateTools;
import org.ocpsoft.pretty.time.PrettyTime;

final class AIMEJobInfoViewPanel extends AbstractViewPanel
{

    private final int CYCLE_COMPLETE = 0x1;
    private final int COMPLETED_ITERATIONS = 0x2;
    private final int EXECUTION_TYPE = 0x3;
    private final int HEAP_SIZE = 0x4;
    private final int TIME_LAST_FUNCTION = 0x5;
    private final int LAST_FUNCTION = 0x6;
    private MainController controller;
    private MainModel model;
    private PrettyTime dateFormatter = new PrettyTime(new Locale("en"));
    private Configuration conf = new AIMEConfiguration().create();

    final static AbstractViewPanel newBuild()
    {
        return new AIMEJobInfoViewPanel();
    }

    private AIMEJobInfoViewPanel()
    {
        createComponent().configure(null).markVisibility(true);
    }

    @Override
    protected AbstractViewPanel createComponent()
    {
        initComponents();
        return this;
    }

    @Override
    public AbstractViewPanel configure(Object o)
    {
        // ALLOWED ACTIONS
        // CONTROLLERS
        controller = new MainController();
        // MODELS
        model = new MainModel();
        // CONFIGURE MODELS
        controller.addModel(model);
        // CONFIGURE VIEWS
        controller.addView(this);

        new Timer(1000, new DataListener()).start();
        return this;
    }

    @Override
    public void modelPropertyChange(PropertyChangeEvent evt)
    {
        switch (evt.getPropertyName())
        {
            case MainController.MAIN_DBASE_TEXT_PROPERTY:
            {
                String newStringValue = evt.getNewValue().toString();
                if (!mainDBaseValueLabel.getText().equals(newStringValue))
                {
                    mainDBaseValueLabel.setText(newStringValue);
                }
                break;
            }
            case MainController.HADOOP_FILES_TEXT_PROPERTY:
            {
                String newStringValue = evt.getNewValue().toString();
                if (!hadoopFilesValueLabel.getText().equals(newStringValue))
                {
                    hadoopFilesValueLabel.setText(newStringValue);
                }
                break;
            }
            case MainController.LOGS_TEXT_PROPERTY:
            {
                String newStringValue = evt.getNewValue().toString();
                if (!logsValueLabel.getText().equals(newStringValue))
                {
                    logsValueLabel.setText(newStringValue);
                }
                break;
            }
            case MainController.KERNEL_INDEX_TEXT_PROPERTY:
            {
                String newStringValue = evt.getNewValue().toString();
                if (!kernelIndexValueLabel.getText().equals(newStringValue))
                {
                    kernelIndexValueLabel.setText(newStringValue);
                }
                break;
            }
            case MainController.KERNEL_DATA_TEXT_PROPERTY:
            {
                String newStringValue = evt.getNewValue().toString();
                if (!kernelDataValueLabel.getText().equals(newStringValue))
                {
                    kernelDataValueLabel.setText(newStringValue);
                }
                break;
            }
            case MainController.CYCLE_COMPLETE_TEXT_PROPERTY:
            {
                String newStringValue = evt.getNewValue().toString();
                if (!cycleCompleteValueLabel.getText().equals(newStringValue))
                {
                    cycleCompleteValueLabel.setText(newStringValue);
                }
                break;
            }
            case MainController.COMPLETED_ITERATIONS_TEXT_PROPERTY:
            {
                String newStringValue = evt.getNewValue().toString();
                if (!completedIterationsValueLabel.getText().equals(newStringValue))
                {
                    completedIterationsValueLabel.setText(newStringValue);
                }
                break;
            }
            case MainController.LAST_FUNCTION_TEXT_PROPERTY:
            {
                String newStringValue = evt.getNewValue().toString();
                if (!lastFunctionValueLabel.getText().equals(newStringValue))
                {
                    lastFunctionValueLabel.setText(newStringValue);
                }
                break;
            }
            case MainController.TIME_LAST_FUNCTION_TEXT_PROPERTY:
            {
                String newStringValue = evt.getNewValue().toString();
                if (!timeLastFunctionValueLabel.getText().equals(newStringValue))
                {
                    timeLastFunctionValueLabel.setText(newStringValue);
                }
                break;
            }
            case MainController.EXECUTION_TYPE_TEXT_PROPERTY:
            {
                String newStringValue = evt.getNewValue().toString();
                if (!executionTypeValueLabel.getText().equals(newStringValue))
                {
                    executionTypeValueLabel.setText(newStringValue);
                }
                break;
            }
            case MainController.HEAP_SIZE_TEXT_PROPERTY:
            {
                String newStringValue = evt.getNewValue().toString();
                if (!heapSizeValueLabel.getText().equals(newStringValue))
                {
                    heapSizeValueLabel.setText(newStringValue);
                }
                break;
            }
        }
    }

    @Override
    public AbstractController getController()
    {
        return controller;
    }

    class DataListener implements ActionListener
    {

        @Override
        public void actionPerformed(ActionEvent e)
        {
            controller.changeMainDBase(GeneralUtilities.getFolderSize(new String[]
            {
                AIMEConstants.MAINDBASE_PATH.getStringConstant()
            }));
            controller.changeHadoopFiles(GeneralUtilities.getFolderSize(new String[]
            {
                conf.get("mapred.local.dir"), conf.get("hadoop.tmp.dir")
            }));
            controller.changeLogs(GeneralUtilities.getFolderSize(new String[]
            {
                AIMEConstants.LOGS_PATH.getStringConstant()
            }));
            controller.changeKernelIndex(GeneralUtilities.getFolderSize(new String[]
            {
                AIMEConstants.KERNEL_INDEX_PATH.getStringConstant()
            }));
            controller.changeKernelData(GeneralUtilities.getFolderSize(new String[]
            {
                AIMEConstants.SEGMENTDBASE_PATH.getStringConstant()
            }));
            controller.changeCycleComplete((String) formatData(CerebellumDHI.getInstance().obtainLocalData(CerebellumDHI.AIME_METADATA, CerebellumDHI.AIME_IS_CYCLE_COMPLETE_DATA).get(), CYCLE_COMPLETE));
            controller.changeCompletedIterations((String) formatData(CerebellumDHI.getInstance().obtainLocalData(CerebellumDHI.AIME_METADATA, CerebellumDHI.AIME_COMPLETED_ITERATIONS_DATA).get(), COMPLETED_ITERATIONS));
            controller.changeLastFunction((String) formatData(CerebellumDHI.getInstance().obtainLocalData(CerebellumDHI.AIME_METADATA, CerebellumDHI.AIME_LAST_FUNCTION_DATA).get(), LAST_FUNCTION));
            controller.changeTimeLastFunction((String) formatData(CerebellumDHI.getInstance().obtainLocalData(CerebellumDHI.AIME_METADATA, CerebellumDHI.AIME_TIME_LAST_FUNCTION_DATA).get(), TIME_LAST_FUNCTION));
            controller.changeExecutionType((String) formatData(CerebellumDHI.getInstance().obtainLocalData(CerebellumDHI.AIME_METADATA, CerebellumDHI.AIME_EXECUTION_TYPE_DATA).get(), EXECUTION_TYPE));
            controller.changeHeapSize((String) formatData(CerebellumDHI.getInstance().obtainLocalData(CerebellumDHI.AIME_METADATA, CerebellumDHI.AIME_HEAP_SIZE_DATA).get(), HEAP_SIZE));
        }
    }

    /**
     * Method for processing the cell data before adding to the table.
     * <p>
     * This method works both for adding and updating table cell
     * information.</p>
     *
     * @param data The cell data
     * @param type The type of data to format
     *
     * @return The formatted cell data
     */
    private Object formatData(Object data, int type)
    {
        try
        {
            switch (type)
            {
                case CYCLE_COMPLETE:
                    return ((Boolean) data) ? "Yes" : "No";
                case COMPLETED_ITERATIONS:
                    return String.valueOf(data);
                case EXECUTION_TYPE:
                    return ((Integer) data == 1) ? "Local" : "Distributed";
                case HEAP_SIZE:
                    return ((Integer) data) + "MB";
                case TIME_LAST_FUNCTION:
                    return ((Long) data > 0)
                           ? dateFormatter.format(DateTools.stringToDate(DateTools.timeToString((Long) data, DateTools.Resolution.MILLISECOND)))
                           : "Never";
                default:
                    return data;
            }
        }
        catch (ParseException e)
        {
            return data;
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        dataPanel = new javax.swing.JPanel();
        firstPanel = new javax.swing.JPanel();
        mainDBaseLabel = new javax.swing.JLabel();
        mainDBaseValueLabel = new javax.swing.JLabel();
        hadoopFilesLabel = new javax.swing.JLabel();
        hadoopFilesValueLabel = new javax.swing.JLabel();
        logsLabel = new javax.swing.JLabel();
        logsValueLabel = new javax.swing.JLabel();
        kernelIndexLabel = new javax.swing.JLabel();
        kernelIndexValueLabel = new javax.swing.JLabel();
        kernelDataLabel = new javax.swing.JLabel();
        kernelDataValueLabel = new javax.swing.JLabel();
        secondPanel = new javax.swing.JPanel();
        cycleCompleteLabel = new javax.swing.JLabel();
        cycleCompleteValueLabel = new javax.swing.JLabel();
        completedIterationsLabel = new javax.swing.JLabel();
        completedIterationsValueLabel = new javax.swing.JLabel();
        lastFunctionLabel = new javax.swing.JLabel();
        lastFunctionValueLabel = new javax.swing.JLabel();
        timeLastFunctionLabel = new javax.swing.JLabel();
        timeLastFunctionValueLabel = new javax.swing.JLabel();
        executionTypeLabel = new javax.swing.JLabel();
        executionTypeValueLabel = new javax.swing.JLabel();
        heapSizeLabel = new javax.swing.JLabel();
        heapSizeValueLabel = new javax.swing.JLabel();

        setName("Form"); // NOI18N
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        dataPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        dataPanel.setName("dataPanel"); // NOI18N
        dataPanel.setLayout(new javax.swing.BoxLayout(dataPanel, javax.swing.BoxLayout.Y_AXIS));

        firstPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Space Consumption:"));
        firstPanel.setName("firstPanel"); // NOI18N

        mainDBaseLabel.setText("Main DBase:");
        mainDBaseLabel.setName("mainDBaseLabel"); // NOI18N

        mainDBaseValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        mainDBaseValueLabel.setText("---");
        mainDBaseValueLabel.setName("mainDBaseValueLabel"); // NOI18N

        hadoopFilesLabel.setText("Hadoop Files:");
        hadoopFilesLabel.setName("hadoopFilesLabel"); // NOI18N

        hadoopFilesValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        hadoopFilesValueLabel.setText("---");
        hadoopFilesValueLabel.setName("hadoopFilesValueLabel"); // NOI18N

        logsLabel.setText("Logs:");
        logsLabel.setName("logsLabel"); // NOI18N

        logsValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        logsValueLabel.setText("---");
        logsValueLabel.setName("logsValueLabel"); // NOI18N

        kernelIndexLabel.setText("Kernel Index:");
        kernelIndexLabel.setName("kernelIndexLabel"); // NOI18N

        kernelIndexValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        kernelIndexValueLabel.setText("---");
        kernelIndexValueLabel.setName("kernelIndexValueLabel"); // NOI18N

        kernelDataLabel.setText("Kernel Data:");
        kernelDataLabel.setName("kernelDataLabel"); // NOI18N

        kernelDataValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        kernelDataValueLabel.setText("---");
        kernelDataValueLabel.setName("kernelDataValueLabel"); // NOI18N

        javax.swing.GroupLayout firstPanelLayout = new javax.swing.GroupLayout(firstPanel);
        firstPanel.setLayout(firstPanelLayout);
        firstPanelLayout.setHorizontalGroup(
            firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(firstPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(firstPanelLayout.createSequentialGroup()
                        .addComponent(kernelDataLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(kernelDataValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, firstPanelLayout.createSequentialGroup()
                        .addComponent(kernelIndexLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(kernelIndexValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, firstPanelLayout.createSequentialGroup()
                        .addComponent(logsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(logsValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, firstPanelLayout.createSequentialGroup()
                        .addComponent(hadoopFilesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(hadoopFilesValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, firstPanelLayout.createSequentialGroup()
                        .addComponent(mainDBaseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                        .addGap(4, 4, 4)
                        .addComponent(mainDBaseValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        firstPanelLayout.setVerticalGroup(
            firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(firstPanelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mainDBaseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainDBaseValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(hadoopFilesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hadoopFilesValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(logsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logsValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(kernelIndexLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(kernelIndexValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(firstPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(kernelDataLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(kernelDataValueLabel))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        dataPanel.add(firstPanel);

        secondPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("General Info:"));
        secondPanel.setName("secondPanel"); // NOI18N

        cycleCompleteLabel.setText("Cycle Complete:");
        cycleCompleteLabel.setName("cycleCompleteLabel"); // NOI18N

        cycleCompleteValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        cycleCompleteValueLabel.setText("---");
        cycleCompleteValueLabel.setName("cycleCompleteValueLabel"); // NOI18N

        completedIterationsLabel.setText("Completed Iterations:");
        completedIterationsLabel.setName("completedIterationsLabel"); // NOI18N

        completedIterationsValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        completedIterationsValueLabel.setText("---");
        completedIterationsValueLabel.setName("completedIterationsValueLabel"); // NOI18N

        lastFunctionLabel.setText("Last Function:");
        lastFunctionLabel.setName("lastFunctionLabel"); // NOI18N

        lastFunctionValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lastFunctionValueLabel.setText("---");
        lastFunctionValueLabel.setName("lastFunctionValueLabel"); // NOI18N

        timeLastFunctionLabel.setText("Time Last Function:");
        timeLastFunctionLabel.setName("timeLastFunctionLabel"); // NOI18N

        timeLastFunctionValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        timeLastFunctionValueLabel.setText("---");
        timeLastFunctionValueLabel.setName("timeLastFunctionValueLabel"); // NOI18N

        executionTypeLabel.setText("Execution Type:");
        executionTypeLabel.setName("executionTypeLabel"); // NOI18N

        executionTypeValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        executionTypeValueLabel.setText("---");
        executionTypeValueLabel.setName("executionTypeValueLabel"); // NOI18N

        heapSizeLabel.setText("Heap Size:");
        heapSizeLabel.setName("heapSizeLabel"); // NOI18N

        heapSizeValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        heapSizeValueLabel.setText("---");
        heapSizeValueLabel.setName("heapSizeValueLabel"); // NOI18N

        javax.swing.GroupLayout secondPanelLayout = new javax.swing.GroupLayout(secondPanel);
        secondPanel.setLayout(secondPanelLayout);
        secondPanelLayout.setHorizontalGroup(
            secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(secondPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(secondPanelLayout.createSequentialGroup()
                        .addComponent(heapSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(heapSizeValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secondPanelLayout.createSequentialGroup()
                        .addComponent(executionTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(executionTypeValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secondPanelLayout.createSequentialGroup()
                        .addComponent(timeLastFunctionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(timeLastFunctionValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secondPanelLayout.createSequentialGroup()
                        .addComponent(lastFunctionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(lastFunctionValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secondPanelLayout.createSequentialGroup()
                        .addComponent(completedIterationsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(completedIterationsValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secondPanelLayout.createSequentialGroup()
                        .addComponent(cycleCompleteLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                        .addGap(4, 4, 4)
                        .addComponent(cycleCompleteValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        secondPanelLayout.setVerticalGroup(
            secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(secondPanelLayout.createSequentialGroup()
                .addGroup(secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cycleCompleteLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cycleCompleteValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(completedIterationsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(completedIterationsValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lastFunctionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lastFunctionValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(timeLastFunctionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(timeLastFunctionValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(executionTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(executionTypeValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(secondPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(heapSizeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(heapSizeValueLabel))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        dataPanel.add(secondPanel);

        add(dataPanel);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel completedIterationsLabel;
    private javax.swing.JLabel completedIterationsValueLabel;
    private javax.swing.JLabel cycleCompleteLabel;
    private javax.swing.JLabel cycleCompleteValueLabel;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JLabel executionTypeLabel;
    private javax.swing.JLabel executionTypeValueLabel;
    private javax.swing.JPanel firstPanel;
    private javax.swing.JLabel hadoopFilesLabel;
    private javax.swing.JLabel hadoopFilesValueLabel;
    private javax.swing.JLabel heapSizeLabel;
    private javax.swing.JLabel heapSizeValueLabel;
    private javax.swing.JLabel kernelDataLabel;
    private javax.swing.JLabel kernelDataValueLabel;
    private javax.swing.JLabel kernelIndexLabel;
    private javax.swing.JLabel kernelIndexValueLabel;
    private javax.swing.JLabel lastFunctionLabel;
    private javax.swing.JLabel lastFunctionValueLabel;
    private javax.swing.JLabel logsLabel;
    private javax.swing.JLabel logsValueLabel;
    private javax.swing.JLabel mainDBaseLabel;
    private javax.swing.JLabel mainDBaseValueLabel;
    private javax.swing.JPanel secondPanel;
    private javax.swing.JLabel timeLastFunctionLabel;
    private javax.swing.JLabel timeLastFunctionValueLabel;
    // End of variables declaration//GEN-END:variables
}
