package io.aime.parse;

// AIME
import io.aime.plugin.Pluggable;
import io.aime.protocol.Content;

// Apache Hadoop
import org.apache.hadoop.conf.Configurable;

// DOM
import org.w3c.dom.DocumentFragment;

/**
 * A parser for content generated by a {@link io.aime.protocol.Protocol}
 * implementation.
 *
 * <p>This interface is implemented by extensions. AIME's core contains no page
 * parsing code.</p>
 *
 * @author Nutch.org
 * @author K-Zen
 */
public interface Parser extends Pluggable, Configurable {

    /**
     * The name of the extension point.
     */
    public final static String X_POINT_ID = Parser.class.getName();

    /**
     * This method parses the given document and returns a map of &lt;key,
     * parse&gt; pairs.
     *
     * <p>{@link Parse} instances will be persisted under the given key.</p>
     *
     * <p>
     * Note: Meta-redirects should be followed only when they are coming from
     * the original URL. That is: <br>
     * Assume fetcher is in parsing mode and is currently processing
     * foo.bar.com/redirect.html. If this url contains a meta redirect to
     * another url, fetcher should only follow the redirect if the map contains
     * an entry of the form &lt;"foo.bar.com/redirect.html", {@link Parse} with
     * a {@link ParseStatus} indicating the redirect&gt;.
     * </p>
     *
     * @param document The content to be parsed.
     *
     * @return A map containing &lt;key, parse&gt; pairs.
     */
    ParseResult getParseResult(Content document);

    /**
     * This method parses a given document and returns the DOM structure if
     * available.
     *
     * <p>This method is only valid if content its an XML or HTML document.</p>
     *
     * @param document The content to be parsed.
     *
     * @return The structure of the document in a DOM tree.
     */
    DocumentFragment getPageStructure(Content document);
}
