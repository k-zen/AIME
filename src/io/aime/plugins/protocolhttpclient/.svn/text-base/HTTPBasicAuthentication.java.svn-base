package io.aime.plugins.protocolhttpclient;

// Apache Commons
import org.apache.commons.codec.binary.Base64;

// Apache Hadoop
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configurable;

// Log4j
import org.apache.log4j.Logger;

// Util
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Implementation of RFC 2617 Basic Authentication. Usernames and passwords are
 * stored in standard AIME configuration files using the following properties:
 * http.auth.basic.<realm>.user http.auth.basic.<realm>.pass
 *
 * @author Matt Tencati
 * @author K-Zen
 */
public class HTTPBasicAuthentication implements HTTPAuthentication, Configurable {

    private static final String KEY = HTTPBasicAuthentication.class.getName();
    private static final Logger LOG = Logger.getLogger(KEY);
    private static Pattern basic = Pattern.compile("[bB][aA][sS][iI][cC] [rR][eE][aA][lL][mM]=\"(\\w*)\"");
    private static Map<String, HTTPBasicAuthentication> authMap = new TreeMap<String, HTTPBasicAuthentication>();
    private Configuration conf = null;
    private String challenge = null;
    private List<String> credentials = null;
    private String realm = null;

    /**
     * Construct an HttpBasicAuthentication for the given challenge parameters.
     * The challenge parameters are returned by the web server using a
     * WWW-Authenticate header. This will typically be represented by single
     * line of the form
     * <code>WWW-Authenticate: Basic realm="myrealm"</code>.
     *
     * @param challenge WWW-Authenticate header from web server
     * @param conf
     *
     * @throws HttpAuthenticationException
     */
    protected HTTPBasicAuthentication(String challenge, Configuration conf) throws HTTPAuthenticationException {
        this.setConf(conf);
        this.challenge = challenge;
        this.credentials = new ArrayList<String>();

        String username = this.conf.get("http.auth.basic." + challenge + ".user");
        String password = this.conf.get("http.auth.basic." + challenge + ".password");

        if (LOG.isDebugEnabled()) {
            LOG.debug("BasicAuthentication challenge: " + challenge);
            LOG.debug("BasicAuthentication username: " + username);
            LOG.debug("BasicAuthentication password: " + password);
        }

        if (username == null) {
            throw new HTTPAuthenticationException("Username for " + challenge + " is null.");
        }

        if (password == null) {
            throw new HTTPAuthenticationException("Password for " + challenge + " is null.");
        }

        byte[] credBytes = (username + ":" + password).getBytes();
        this.credentials.add("Authorization: Basic " + new String(Base64.encodeBase64(credBytes)));

        if (LOG.isDebugEnabled()) {
            LOG.debug("Basic credencials: " + credentials);
        }
    }

    @Override
    public void setConf(Configuration conf) {
        this.conf = conf;
    }

    @Override
    public Configuration getConf() {
        return this.conf;
    }

    /**
     * Gets the Basic credentials generated by this HttpBasicAuthentication
     * object.
     *
     * @return Credentials in the form of
     *         <code>Authorization: Basic &lt;Base64 encoded userid:password&gt;</code>
     */
    @Override
    public List<String> getCredentials() {
        return this.credentials;
    }

    /**
     * Gets the realm attribute of the HttpBasicAuthentication object. This
     * should have been supplied to the
     * {@link #getAuthentication(String, Configuration)} static method.
     *
     * @return The realm
     */
    @Override
    public String getRealm() {
        return this.realm;
    }

    /**
     * This method is responsible for providing Basic authentication
     * information. The method caches authentication information for each realm
     * so that the required authentication information does not need to be
     * regenerated for every request.
     *
     * @param challenge The challenge string provided by the webserver. This is
     *                  the text which follows the WWW-Authenticate header,
     *                  including the Basic tag.
     * @param conf
     *
     * @return An HttpBasicAuthentication object or null if unable to generate
     *         appropriate credentials.
     */
    @SuppressWarnings("unchecked")
    public static HTTPBasicAuthentication getAuthentication(String challenge, Configuration conf) {
        if (challenge == null) {
            return null;
        }

        Matcher basicMatcher = basic.matcher(challenge);
        if (basicMatcher.matches()) {
            String realm = basicMatcher.group(1);
            Object auth = HTTPBasicAuthentication.authMap.get(realm);

            if (auth == null) {
                HTTPBasicAuthentication newAuth = null;

                try {
                    newAuth = new HTTPBasicAuthentication(realm, conf);
                }
                catch (HTTPAuthenticationException hae) {
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("HttpBasicAuthentication failed for: " + challenge);
                    }
                }

                HTTPBasicAuthentication.authMap.put(realm, newAuth);

                return newAuth;
            }
            else {
                return (HTTPBasicAuthentication) auth;
            }
        }

        return null;
    }

    /**
     * Provides a pattern which can be used by an outside resource to determine
     * if this class can provide credentials based on simple header information.
     * It does not calculate any information regarding realms or challenges.
     *
     * @return Returns a Pattern which will match a Basic WWW-Authenticate
     *         header.
     */
    public static final Pattern getBasicPattern() {
        return basic;
    }
}
