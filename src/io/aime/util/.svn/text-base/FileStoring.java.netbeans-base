package io.aime.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import javax.crypto.Cipher;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import org.apache.log4j.Logger;

/**
 * Generic class for storing serializable objects to file, and also for reading
 * serializable objects from files.
 * <p>
 * This class uses the Singleton pattern for writing and reading from file.
 * Using this pattern allows for the access to the file to be synchronized on
 * the instance itself.</p>
 *
 * @see Singleton Pattern.
 *
 * @author K-Zen
 */
public class FileStoring
{

    private static final Logger LOG = Logger.getLogger(FileStoring.class.getName());
    private static final String KEY = "AIME_K-Zen_2013";
    private static final FileStoring _INSTANCE = new FileStoring();

    public static FileStoring getInstance()
    {
        return FileStoring._INSTANCE;
    }

    /**
     * Builds a secret key from a text password
     *
     * @param password The password to be used when generating the key
     *
     * @return The generated key
     *
     * @throws Exception
     */
    private static SecretKey buildSecretKey(String password) throws Exception
    {
        byte[] passwordBytes = password.getBytes();
        DESKeySpec keySpec = new DESKeySpec(passwordBytes);
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");

        return keyFactory.generateSecret(keySpec);
    }

    /**
     * This method writes the serializable object to file.
     *
     * @param file    The file object.
     * @param object  The serialized object.
     * @param encrypt If we should encrypt the data.
     */
    synchronized public void writeToFile(File file, Serializable object, boolean encrypt)
    {
        if (object == null)
        {
            LOG.error("Can't serialize a NULL object!");
        }

        Cipher cipher = null;
        try
        {
            cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, FileStoring.buildSecretKey(KEY));
        }
        catch (Exception e)
        {
            LOG.error("Error initializing the cipher. Error: " + e.toString(), e);
        }

        FileOutputStream fos = null;
        try
        {
            fos = new FileOutputStream(file);
        }
        catch (FileNotFoundException e)
        {
            LOG.error("Error obtaining output file. Error: " + e.toString(), e);
        }

        ObjectOutputStream oos = null;
        try
        {
            oos = new ObjectOutputStream(fos);
            oos.writeObject((encrypt) ? new SealedObject(object, cipher) : object);
        }
        catch (Exception e)
        {
            LOG.error("Error writing object to file. Error: " + e.toString(), e);
        }
        finally
        {
            if (oos != null)
            {
                try
                {
                    oos.close();
                    fos.close(); // If we've reach here, it means this object isn't null.
                }
                catch (IOException e)
                {
                    LOG.fatal("Error trying to close stream to file. Error: " + e.toString(), e);
                }
            }
        }
    }

    /**
     * This method reads the serializable object from file.
     *
     * @param file    The file object.
     * @param decrypt If we should decrypt the data.
     */
    synchronized public Serializable readFromFile(File file, boolean decrypt)
    {
        // Check if the file exists.
        if (!file.exists())
        {
            return null;
        }

        Serializable data = null;
        Cipher cipher = null;
        try
        {
            cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
            cipher.init(Cipher.DECRYPT_MODE, FileStoring.buildSecretKey(KEY));
        }
        catch (Exception e)
        {
            LOG.error("Error initializing the cipher. Error: " + e.toString(), e);
        }

        FileInputStream fis = null;
        try
        {
            fis = new FileInputStream(file);
        }
        catch (FileNotFoundException e)
        {
            LOG.error("Error obtaining input file. Error: " + e.toString(), e);
        }

        ObjectInputStream ois = null;
        try
        {
            ois = new ObjectInputStream(fis);
            data = (Serializable) ((SealedObject) ois.readObject()).getObject(cipher);
            ois.close();
        }
        catch (Exception e)
        {
            LOG.error("Error reading object from file. Error: " + e.toString(), e);
        }
        finally
        {
            if (ois != null)
            {
                try
                {
                    ois.close();
                    fis.close(); // If we've reach here, it means this object isn't null.
                }
                catch (IOException e)
                {
                    LOG.fatal("Error trying to close stream to file. Error: " + e.toString(), e);
                }
            }
        }

        return data;
    }
}
