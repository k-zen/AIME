package io.aime.util;

// AIME
import io.aime.cerebellum.CerebellumDHI;

// Apache Commons
import org.apache.commons.lang.StringUtils;
import org.apache.commons.validator.routines.UrlValidator;

// Apache Hadoop
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.ObjectWritable;

// IO
import java.io.File;
import java.io.IOException;

// Log4j
import org.apache.log4j.Logger;

// Net
import java.util.ArrayList;

// Util
import java.util.Iterator;
import java.util.List;
import java.util.TreeMap;

/**
 * This class handles all the seeds of the crawler.
 *
 * <p>How seeds work...?</p>
 * <p>
 * Properties of seeds:
 * <ul>
 * <li>Seeds can be a domain name or host. i.e. http://example.com,
 * https://www.example.com, http://hello.example.com</li>
 * <li>Seeds can be a file. i.e. file:///Users/akc</li>
 * <li>Seeds must be prefixed with the corresponding protocol. i.e.
 * http://example.com, https://hello.example.com, file:///Users/akc</li>
 * </ul>
 * </p>
 *
 * <p>Example of an entry for a seed:
 * <pre>
 * aime.io[String] => [HashMap[String,String]]
 *    score => 6.0
 *    fetchinterval => 86400
 *    type => master OR regular
 * </pre>
 * </p>
 *
 * @author K-Zen
 */
public class SeedServer {

    private static final Logger LOG = Logger.getLogger(SeedServer.class.getName());
    private static final UrlValidator VALIDATOR = new UrlValidator(new String[]{"http", "https", "file", "smb"}, UrlValidator.ALLOW_LOCAL_URLS);

    /**
     * This method returns only the URLs of the seeds, nothing else.
     *
     * @return An array with the URLs of the seeds.
     */
    public static String[] getURLs() {
        TreeMap<String, TreeMap<String, String>> seeds = (TreeMap<String, TreeMap<String, String>>) CerebellumDHI.getInstance().obtainLocalData(
                CerebellumDHI.AIME_METADATA,
                CerebellumDHI.SEEDS_DATA).get();
        List<String> urls = new ArrayList<String>();
        Iterator<String> i = seeds.keySet().iterator();
        while (i.hasNext()) {
            urls.add(i.next());
        }

        return urls.toArray(new String[urls.size()]);
    }

    /**
     * This method saves the seeds from memory to file.
     */
    private static void saveToFile(TreeMap<String, TreeMap<String, String>> seeds) {
        CerebellumDHI.getInstance().modifyLocalData(CerebellumDHI.AIME_METADATA, CerebellumDHI.SEEDS_DATA, new ObjectWritable(seeds));
    }

    /**
     * This method receives a list of seeds entered by the user via the
     * SeedServer window in the view, and saves it to file.
     *
     * @param seeds A Map containing the seeds entered by the user via the view.
     */
    public static void importSeeds(TreeMap<String, TreeMap<String, String>> seeds) {
        saveToFile(seeds);
    }

    /**
     * This class will modify the seeds based on modifications made through the
     * corresponding window.
     *
     * @param url The URL to add.
     */
    public static void updateSeeds(String url) {
        // Replace spaces in file or URL.
        url = url.replaceAll("\\s+", "+");
        // Remove trailing slashes.
        url = StringUtils.chomp(url, "/");
        // If does not validate, then return.
        if (!VALIDATOR.isValid(url)) {
            return;
        }

        TreeMap<String, String> value = new TreeMap<String, String>();
        value.put("url", url);
        value.put("score", "10.0");
        value.put("fetchinterval", "86400");

        TreeMap<String, TreeMap<String, String>> seeds = (TreeMap<String, TreeMap<String, String>>) CerebellumDHI.getInstance().obtainLocalData(
                CerebellumDHI.AIME_METADATA,
                CerebellumDHI.SEEDS_DATA).get();
        seeds.put(url, value);

        saveToFile(seeds);
    }

    public static void deleteSeeds(String url) {
        TreeMap<String, TreeMap<String, String>> seeds = (TreeMap<String, TreeMap<String, String>>) CerebellumDHI.getInstance().obtainLocalData(
                CerebellumDHI.AIME_METADATA,
                CerebellumDHI.SEEDS_DATA).get();
        seeds.remove(url);
        saveToFile(seeds);
    }

    public TreeMap<String, TreeMap<String, String>> parseSeeds(String text) {
        TreeMap<String, TreeMap<String, String>> newSeeds = new TreeMap<String, TreeMap<String, String>>();
        // Iterate here each line, and build Map.
        String[] lines = text.split("\\n");
        if (lines != null) {
            for (String url : lines) {
                // FILTERS:
                // 1. If the line is empty then continue.
                if (url.isEmpty()) {
                    continue;
                }
                // 2. Convert to lowercase.
                url = url.toLowerCase();
                // 3. Replace spaces in file or URL.
                url = url.replaceAll("\\s+", "+");
                // 4. If the URL is not valid.
                if (!VALIDATOR.isValid(url)) {
                    continue;
                }

                TreeMap<String, String> value = new TreeMap<String, String>();
                value.put("url", url);
                value.put("score", "10.0");
                value.put("fetchinterval", "86400");

                newSeeds.put(url, value);
            }
        }

        return newSeeds;
    }

    /**
     * This method parses the Seed DBase and loads a file in which every single
     * URL occupies one line.
     *
     * <p>This file will be feed to the Injector as an FileInputFormat file, and
     * the MR job will read this file line by line, inserting each URL into the
     * Main DBase.</p>
     *
     * @param seedFile Where to put the seed file
     * @param exeType  The execution type
     */
    public static void prepareFile(String seedFile, Integer exeType) {
        FileSystem fs = null;
        try {
            fs = FileSystem.get(new AIMEConfiguration().create());
        }
        catch (IOException e) {
            LOG.fatal("An instance of the file system could not be obtain. Error: " + e.toString(), e);
        }

        // Cleanup previous files.
        if (exeType.intValue() == AIMEConstants.LOCAL_EXECUTION_TYPE.getIntegerConstant()) {
            File f = new File(seedFile);
            if (f.isFile()) {
                f.delete();
            }
        }
        else {
            try {
                fs.delete(new Path(AIMEConstants.SEEDS_FILE_PATH.getStringConstant()), true);
            }
            catch (IOException e) {
                LOG.error("The seed file in the DFS could not be deleted. Error: " + e.toString(), e);
            }
        }

        // Now load the seeds into the file, and if distributed mode, also load in the local FS,
        // latter the local version of the file will be copied into DFS for use.
        // Seed iterator.
        for (String seedURL : getURLs()) {
            GeneralUtilities.logToFile(seedFile, seedURL);
        }

        // Copy the file to DFS, so that it can be used by MapReduce jobs.
        if (exeType.intValue() == AIMEConstants.DISTRIBUTED_EXECUTION_TYPE.getIntegerConstant()) {
            try {
                fs.copyFromLocalFile(true, true, new Path(seedFile), new Path(seedFile));
            }
            catch (IOException e) {
                LOG.error("The seed file could not be copied into DFS. Error: " + e.toString(), e);
            }
        }
    }
}
