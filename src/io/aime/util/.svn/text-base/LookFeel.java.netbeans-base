package io.aime.util;

// Apache Commons
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.SystemUtils;

// AWT
import java.awt.Color;
import java.awt.GraphicsEnvironment;
import java.awt.Font;
import java.awt.Insets;

// Infonode
import net.infonode.gui.laf.InfoNodeLookAndFeel;
import net.infonode.gui.laf.InfoNodeLookAndFeelTheme;

// Swing
import javax.swing.BorderFactory;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.LineBorder;
import javax.swing.border.MatteBorder;
import javax.swing.plaf.BorderUIResource;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.FontUIResource;

public class LookFeel {

    static class FontSettings {

        static final String[] FONT_NORMAL = new String[]{"Tahoma", "Lucida Grande", "Lucida Sans"};
        static final int DEFAULT_FONT_SIZE = 12;
    }

    static class ColorSettings {

        // Color Palette: http://www.colourlovers.com/palette/474406/UbuntuStudio
        static final Color COLOR_1 = new Color(191, 191, 191);
        static final Color COLOR_2 = new Color(0, 155, 249);
        static final Color COLOR_3 = new Color(44, 44, 44);
        static final Color COLOR_4 = new Color(80, 80, 80);
        static final Color CONTROL_COLOR = COLOR_3;
        static final Color PRIMARY_CONTROL_COLOR = COLOR_2;
        static final Color FOREGROUND_COLOR = COLOR_1;
        static final Color BACKGROUND_COLOR = CONTROL_COLOR;
        static final Color SELECTED_BACKGROUND_COLOR = COLOR_1;
        static final Color SELECTED_FOREGROUND_COLOR = COLOR_3;
        static final Color TOOLTIP_BACKGROUND_COLOR = COLOR_3;
        static final Color TOOLTIP_FOREGROUND_COLOR = FOREGROUND_COLOR;
    }

    static class BorderSettings {

        static final Border DEFAULT_BORDER = new BorderUIResource.CompoundBorderUIResource(new LineBorder(Color.DARK_GRAY, 1, false), BorderFactory.createEmptyBorder(2, 2, 2, 2));
    }

    private static int getDefaultFontSize() {
        return FontSettings.DEFAULT_FONT_SIZE;
    }

    public InfoNodeLookAndFeel getLook() {
        InfoNodeLookAndFeelTheme i = new InfoNodeLookAndFeelTheme();
        i.setPrimaryControlColor(ColorSettings.PRIMARY_CONTROL_COLOR);
        i.setControlColor(ColorSettings.CONTROL_COLOR);
        i.setTextColor(ColorSettings.FOREGROUND_COLOR);
        i.setBackgroundColor(ColorSettings.BACKGROUND_COLOR);
        i.setSelectedTextBackgroundColor(ColorSettings.SELECTED_BACKGROUND_COLOR);
        i.setSelectedTextColor(ColorSettings.SELECTED_FOREGROUND_COLOR);
        i.setShadingFactor(0.6);
        i.setTooltipBackgroundColor(ColorSettings.TOOLTIP_BACKGROUND_COLOR);
        i.setTooltipForegroundColor(new ColorUIResource(ColorSettings.TOOLTIP_FOREGROUND_COLOR));
        i.setPopupMenuBorder(new BorderUIResource(new CompoundBorder(new MatteBorder(new Insets(1, 1, 1, 1), new Color(0, 0, 0)), null)));
        i.setFont(new FontUIResource(getFont(false, 0)));

        return new InfoNodeLookAndFeel(i);
    }

    public static Font getFont(boolean bold, int size) {
        return getFont(bold, false, size);
    }

    public static Font getFont(boolean bold, boolean italic, int size) {
        int style;
        String[] availableFonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
        for (String entry : FontSettings.FONT_NORMAL) {
            if (ArrayUtils.contains(availableFonts, entry) && SystemUtils.IS_OS_MAC_OSX) {
                if (bold) {
                    if (italic) {
                        style = Font.BOLD + Font.ITALIC;
                    }
                    else {
                        style = Font.BOLD;
                    }
                }
                else {
                    if (italic) {
                        style = Font.PLAIN + Font.ITALIC;
                    }
                    else {
                        style = Font.PLAIN;
                    }
                }
                return new Font(entry, style, getDefaultFontSize() + size);
            }
        }

        return new InfoNodeLookAndFeelTheme().getFont().deriveFont((bold) ? Font.BOLD : Font.PLAIN, getDefaultFontSize() + size);
    }

    public static Border getDefaultBorder() {
        return BorderSettings.DEFAULT_BORDER;
    }

    public static Color getForegroundColor() {
        return ColorSettings.FOREGROUND_COLOR;
    }

    public static Color getPrimaryControlColor() {
        return ColorSettings.PRIMARY_CONTROL_COLOR;
    }

    public static Color getGraphsColor() {
        return ColorSettings.COLOR_4;
    }
}
