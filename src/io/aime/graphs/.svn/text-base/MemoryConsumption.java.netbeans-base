package io.aime.graphs;

// AIME
import io.aime.util.HtmlMessageBuilder;
import io.aime.util.LookFeel;

// AWT
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

// JFreeChart
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.DateTickUnitType;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeTableXYDataset;

// Swing
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.border.EmptyBorder;

public class MemoryConsumption extends JPanel {

  private TimeTableXYDataset dataset = new TimeTableXYDataset ();
  private Initiator initiator = new Initiator ();
  private Utilities utilities;

  public MemoryConsumption () {
    super (new BorderLayout ());
    this.initiator.initHandlers ();

    final DateAxis domain = new DateAxis ("Time");
    domain.setLabelFont (new Font (LookFeel.getFontBold (), Font.BOLD, LookFeel.getDefaultFontSize (0)));
    domain.setLabelPaint (LookFeel.FOREGROUND_COLOR);
    domain.setAutoRange (true);
    domain.setLowerMargin (0.0);
    domain.setUpperMargin (0.0);
    domain.setTickLabelsVisible (false);
    domain.setTickUnit (new DateTickUnit (DateTickUnitType.SECOND, 10));
    domain.setFixedAutoRange (240000.0d);
    domain.setTickLabelFont (new Font (LookFeel.getFontBold (), Font.BOLD, LookFeel.getDefaultFontSize (-1)));
    domain.setTickLabelPaint (LookFeel.FOREGROUND_COLOR);

    final NumberAxis range = new NumberAxis ("MiB");
    range.setLabelFont (new Font (LookFeel.getFontBold (), Font.BOLD, LookFeel.getDefaultFontSize (0)));
    range.setLabelPaint (LookFeel.FOREGROUND_COLOR);
    range.setAutoRange (true);
    range.setStandardTickUnits (NumberAxis.createIntegerTickUnits ());
    range.setTickLabelFont (new Font (LookFeel.getFontBold (), Font.BOLD, LookFeel.getDefaultFontSize (-1)));
    range.setTickLabelPaint (LookFeel.FOREGROUND_COLOR);

    final XYAreaRenderer renderer = new XYAreaRenderer (XYAreaRenderer.AREA);
    renderer.setSeriesPaint (0, LookFeel.SERIES_PAINT);
    renderer.setSeriesStroke (0, new BasicStroke (1.0f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
    renderer.setBaseItemLabelFont (new Font (LookFeel.getFontBold (), Font.BOLD, LookFeel.getDefaultFontSize (0)));
    renderer.setBaseLegendTextFont (new Font (LookFeel.getFontBold (), Font.BOLD, LookFeel.getDefaultFontSize (0)));

    final XYPlot xyplot = new XYPlot (this.dataset, domain, range, renderer);
    xyplot.setBackgroundPaint (LookFeel.GRAPH_BACKGROUND_COLOR);
    xyplot.setDomainGridlinePaint (LookFeel.GRAPH_GRID_COLOR);
    xyplot.setRangeGridlinePaint (LookFeel.GRAPH_GRID_COLOR);
    xyplot.setDomainCrosshairVisible (true);
    xyplot.setRangeCrosshairVisible (true);

    final JFreeChart chart = new JFreeChart (null, null, xyplot, false);
    final ChartPanel chartPanel = new ChartPanel (chart);
    chartPanel.setPopupMenu (null);
    super.setLayout (new BorderLayout ());
    JLabel introText = new JLabel (
            HtmlMessageBuilder.buildOnlyOneParagraphMsg (
            "This graph shows how much memory AIME is consuming in this JVM. To see the memory consumption of AIME's Kernel, use Oracle's VisualVM tool."));
    introText.setBorder (new EmptyBorder (4, 4, 4, 4));
    super.add (introText, BorderLayout.NORTH);
    super.add (chartPanel, BorderLayout.CENTER);

    // Lanzar el hilo de coleccion.
    new Updater ().start ();
  }

  private class Initiator {

    void initHandlers () {
      MemoryConsumption.this.utilities = new Utilities ();
    }
  }

  private class Utilities {

    void addUsedObservation (double y) {
      MemoryConsumption.this.dataset.add (new Second (), y, "Used");
    }
  }

  private class Updater extends Timer implements ActionListener {

    private Updater () {
      super (2000, null);
      super.addActionListener (this);
    }

    @Override
    public void actionPerformed (ActionEvent event) {
      long f = (Runtime.getRuntime ().freeMemory () / 1024) / 1024;
      long t = (Runtime.getRuntime ().totalMemory () / 1024) / 1024;

      MemoryConsumption.this.utilities.addUsedObservation (t - f);
    }
  }
}
